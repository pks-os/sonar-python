
difflibú
Matchdifflib.Match"builtins.tuple*é
_replacedifflib.Match._replace"£
difflib.Match._NTã
-Tuple[builtins.int,builtins.int,builtins.int]
builtins.int"builtins.int
builtins.int"builtins.int
builtins.int"builtins.int*Ø
_self£
difflib.Match._NTã
-Tuple[builtins.int,builtins.int,builtins.int]
builtins.int"builtins.int
builtins.int"builtins.int
builtins.int"builtins.int*%
a
builtins.int"builtins.int *%
b
builtins.int"builtins.int *(
size
builtins.int"builtins.int z38z39z310z311z312z313*©
__new__difflib.Match.__new__"£
difflib.Match._NTã
-Tuple[builtins.int,builtins.int,builtins.int]
builtins.int"builtins.int
builtins.int"builtins.int
builtins.int"builtins.int*“
_cls«
Type[difflib.Match._NT]£
difflib.Match._NTã
-Tuple[builtins.int,builtins.int,builtins.int]
builtins.int"builtins.int
builtins.int"builtins.int
builtins.int"builtins.int"type*#
a
builtins.int"builtins.int*#
b
builtins.int"builtins.int*&
size
builtins.int"builtins.intz38z39z310z311z312z313*«
_asdictdifflib.Match._asdict"W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*Ø
_self£
difflib.Match._NTã
-Tuple[builtins.int,builtins.int,builtins.int]
builtins.int"builtins.int
builtins.int"builtins.int
builtins.int"builtins.intz38z39z310z311z312z313*¨
_makedifflib.Match._make"£
difflib.Match._NTã
-Tuple[builtins.int,builtins.int,builtins.int]
builtins.int"builtins.int
builtins.int"builtins.int
builtins.int"builtins.int*“
_cls«
Type[difflib.Match._NT]£
difflib.Match._NTã
-Tuple[builtins.int,builtins.int,builtins.int]
builtins.int"builtins.int
builtins.int"builtins.int
builtins.int"builtins.int"type*>
iterable0
typing.Iterable[Any]
Any"typing.Iterable*
new
Any *
len
Any 0:classmethodpz38z39z310z311z312z313j38j39j310j311j312j313rj
adifflib.Match.a
builtins.int"builtins.int*38*38*39*39*310*310*311*311*312*312*313*313rj
bdifflib.Match.b
builtins.int"builtins.int*38*38*39*39*310*310*311*311*312*312*313*313rp
sizedifflib.Match.size
builtins.int"builtins.int*38*38*39*39*310*310*311*311*312*312*313*313r 
_fieldsdifflib.Match._fieldsã
-Tuple[builtins.str,builtins.str,builtins.str]
builtins.str"builtins.str
builtins.str"builtins.str
builtins.str"builtins.str*38*39*310*311*312*313rü
_field_typesdifflib.Match._field_typesW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*38*39*310*311*312*313r•
_field_defaultsdifflib.Match._field_defaultsW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*38*39*310*311*312*313rZ
_sourcedifflib.Match._source
builtins.str"builtins.str*38*39*310*311*312*313r•
__annotations__difflib.Match.__annotations__W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*38*39*310*311*312*313rº
__match_args__difflib.Match.__match_args__˜
HTuple[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str*310*311*312*313∏9
SequenceMatcherdifflib.SequenceMatcher"builtins.object*€
set_seqs difflib.SequenceMatcher.set_seqs"
None*é
selfÉ
#difflib.SequenceMatcher[difflib._T]C

difflib._T"
builtins.object"builtins.object"builtins.object"difflib.SequenceMatcher*z
as
typing.Sequence[difflib._T]C

difflib._T"
builtins.object"builtins.object"builtins.object"typing.Sequence*z
bs
typing.Sequence[difflib._T]C

difflib._T"
builtins.object"builtins.object"builtins.object"typing.Sequencez38z39z310z311z312z313*ﬂ
set_seq1 difflib.SequenceMatcher.set_seq1"
None*é
selfÉ
#difflib.SequenceMatcher[difflib._T]C

difflib._T"
builtins.object"builtins.object"builtins.object"difflib.SequenceMatcher*z
as
typing.Sequence[difflib._T]C

difflib._T"
builtins.object"builtins.object"builtins.object"typing.Sequencez38z39z310z311z312z313*ﬂ
set_seq2 difflib.SequenceMatcher.set_seq2"
None*é
selfÉ
#difflib.SequenceMatcher[difflib._T]C

difflib._T"
builtins.object"builtins.object"builtins.object"difflib.SequenceMatcher*z
bs
typing.Sequence[difflib._T]C

difflib._T"
builtins.object"builtins.object"builtins.object"typing.Sequencez38z39z310z311z312z313*Õ
find_longest_match*difflib.SequenceMatcher.find_longest_match"Ÿ
8TypeAlias[Tuple[builtins.int,builtins.int,builtins.int]]ã
-Tuple[builtins.int,builtins.int,builtins.int]
builtins.int"builtins.int
builtins.int"builtins.int
builtins.int"builtins.int"difflib.Match*é
selfÉ
#difflib.SequenceMatcher[difflib._T]C

difflib._T"
builtins.object"builtins.object"builtins.object"difflib.SequenceMatcher*%
alo
builtins.int"builtins.int*%
ahi
builtins.int"builtins.int*%
blo
builtins.int"builtins.int*%
bhi
builtins.int"builtins.intz38*π
find_longest_match*difflib.SequenceMatcher.find_longest_match"Ÿ
8TypeAlias[Tuple[builtins.int,builtins.int,builtins.int]]ã
-Tuple[builtins.int,builtins.int,builtins.int]
builtins.int"builtins.int
builtins.int"builtins.int
builtins.int"builtins.int"difflib.Match*é
selfÉ
#difflib.SequenceMatcher[difflib._T]C

difflib._T"
builtins.object"builtins.object"builtins.object"difflib.SequenceMatcher*'
alo
builtins.int"builtins.int *O
ahiD
Union[builtins.int,None]
builtins.int"builtins.int
None *'
blo
builtins.int"builtins.int *O
bhiD
Union[builtins.int,None]
builtins.int"builtins.int
None z39z310z311z312z313*¶
get_matching_blocks+difflib.SequenceMatcher.get_matching_blocks"¥
Gbuiltins.list[TypeAlias[Tuple[builtins.int,builtins.int,builtins.int]]]Ÿ
8TypeAlias[Tuple[builtins.int,builtins.int,builtins.int]]ã
-Tuple[builtins.int,builtins.int,builtins.int]
builtins.int"builtins.int
builtins.int"builtins.int
builtins.int"builtins.int"difflib.Match"builtins.list*é
selfÉ
#difflib.SequenceMatcher[difflib._T]C

difflib._T"
builtins.object"builtins.object"builtins.object"difflib.SequenceMatcherz38z39z310z311z312z313*≠
get_opcodes#difflib.SequenceMatcher.get_opcodes"À
Vbuiltins.list[Tuple[builtins.str,builtins.int,builtins.int,builtins.int,builtins.int]]·
GTuple[builtins.str,builtins.int,builtins.int,builtins.int,builtins.int]
builtins.str"builtins.str
builtins.int"builtins.int
builtins.int"builtins.int
builtins.int"builtins.int
builtins.int"builtins.int"builtins.list*é
selfÉ
#difflib.SequenceMatcher[difflib._T]C

difflib._T"
builtins.object"builtins.object"builtins.object"difflib.SequenceMatcherz38z39z310z311z312z313*·
get_grouped_opcodes+difflib.SequenceMatcher.get_grouped_opcodes"»
gtyping.Iterable[builtins.list[Tuple[builtins.str,builtins.int,builtins.int,builtins.int,builtins.int]]]À
Vbuiltins.list[Tuple[builtins.str,builtins.int,builtins.int,builtins.int,builtins.int]]·
GTuple[builtins.str,builtins.int,builtins.int,builtins.int,builtins.int]
builtins.str"builtins.str
builtins.int"builtins.int
builtins.int"builtins.int
builtins.int"builtins.int
builtins.int"builtins.int"builtins.list"typing.Iterable*é
selfÉ
#difflib.SequenceMatcher[difflib._T]C

difflib._T"
builtins.object"builtins.object"builtins.object"difflib.SequenceMatcher*%
n
builtins.int"builtins.int z38z39z310z311z312z313*ı
ratiodifflib.SequenceMatcher.ratio" 
builtins.float"builtins.float*é
selfÉ
#difflib.SequenceMatcher[difflib._T]C

difflib._T"
builtins.object"builtins.object"builtins.object"difflib.SequenceMatcherz38z39z310z311z312z313*Å
quick_ratio#difflib.SequenceMatcher.quick_ratio" 
builtins.float"builtins.float*é
selfÉ
#difflib.SequenceMatcher[difflib._T]C

difflib._T"
builtins.object"builtins.object"builtins.object"difflib.SequenceMatcherz38z39z310z311z312z313*ã
real_quick_ratio(difflib.SequenceMatcher.real_quick_ratio" 
builtins.float"builtins.float*é
selfÉ
#difflib.SequenceMatcher[difflib._T]C

difflib._T"
builtins.object"builtins.object"builtins.object"difflib.SequenceMatcherz38z39z310z311z312z313*€
__class_getitem__)difflib.SequenceMatcher.__class_getitem__"(
types.GenericAlias"types.GenericAlias*√
clsπ
)Type[difflib.SequenceMatcher[difflib._T]]É
#difflib.SequenceMatcher[difflib._T]C

difflib._T"
builtins.object"builtins.object"builtins.object"difflib.SequenceMatcher"type*
item
Anypz39z310z311z312z3132â
__init__ difflib.SequenceMatcher.__init__ì
__init__ difflib.SequenceMatcher.__init__"
None*é
selfÉ
#difflib.SequenceMatcher[difflib._T]C

difflib._T"
builtins.object"builtins.object"builtins.object"difflib.SequenceMatcher*ì
isjunkÜ
+Union[CallableType[builtins.function],None]K
CallableType[builtins.function]&
builtins.function"builtins.function
None*z
as
typing.Sequence[difflib._T]C

difflib._T"
builtins.object"builtins.object"builtins.object"typing.Sequence*z
bs
typing.Sequence[difflib._T]C

difflib._T"
builtins.object"builtins.object"builtins.object"typing.Sequence*.
autojunk
builtins.bool"builtins.bool 0:overloadX˝
__init__ difflib.SequenceMatcher.__init__"
None*é
selfÉ
#difflib.SequenceMatcher[difflib._T]C

difflib._T"
builtins.object"builtins.object"builtins.object"difflib.SequenceMatcher*z
as
typing.Sequence[difflib._T]C

difflib._T"
builtins.object"builtins.object"builtins.object"typing.Sequence*z
bs
typing.Sequence[difflib._T]C

difflib._T"
builtins.object"builtins.object"builtins.object"typing.Sequence*.
autojunk
builtins.bool"builtins.bool 0:overloadX®
__init__ difflib.SequenceMatcher.__init__"
None*h
self^
%difflib.SequenceMatcher[builtins.str]
builtins.str"builtins.str"difflib.SequenceMatcher*ï
isjunkÜ
+Union[CallableType[builtins.function],None]K
CallableType[builtins.function]&
builtins.function"builtins.function
None *W
aN
typing.Sequence[builtins.str]
builtins.str"builtins.str"typing.Sequence *W
bN
typing.Sequence[builtins.str]
builtins.str"builtins.str"typing.Sequence *.
autojunk
builtins.bool"builtins.bool 0:overloadX"38"39"310"311"312"313Pj38j39j310j311j312j313€
Differdifflib.Differ"builtins.object*©
__init__difflib.Differ.__init__"
None**
self 
difflib.Differ"difflib.Differ*ó
linejunkÜ
+Union[CallableType[builtins.function],None]K
CallableType[builtins.function]&
builtins.function"builtins.function
None *ó
charjunkÜ
+Union[CallableType[builtins.function],None]K
CallableType[builtins.function]&
builtins.function"builtins.function
None z38z39z310z311z312z313*Á
comparedifflib.Differ.compare"N
typing.Iterator[builtins.str]
builtins.str"builtins.str"typing.Iterator**
self 
difflib.Differ"difflib.Differ*U
aN
typing.Sequence[builtins.str]
builtins.str"builtins.str"typing.Sequence*U
bN
typing.Sequence[builtins.str]
builtins.str"builtins.str"typing.Sequencez38z39z310z311z312z313j38j39j310j311j312j313Ω
HtmlDiffdifflib.HtmlDiff"builtins.object*¥
__init__difflib.HtmlDiff.__init__"
None*.
self$
difflib.HtmlDiff"difflib.HtmlDiff*+
tabsize
builtins.int"builtins.int *V

wrapcolumnD
Union[builtins.int,None]
builtins.int"builtins.int
None *ó
linejunkÜ
+Union[CallableType[builtins.function],None]K
CallableType[builtins.function]&
builtins.function"builtins.function
None *ó
charjunkÜ
+Union[CallableType[builtins.function],None]K
CallableType[builtins.function]&
builtins.function"builtins.function
None z38z39z310z311z312z313*±
	make_filedifflib.HtmlDiff.make_file"
builtins.str"builtins.str*.
self$
difflib.HtmlDiff"difflib.HtmlDiff*]
	fromlinesN
typing.Sequence[builtins.str]
builtins.str"builtins.str"typing.Sequence*[
tolinesN
typing.Sequence[builtins.str]
builtins.str"builtins.str"typing.Sequence*,
fromdesc
builtins.str"builtins.str **
todesc
builtins.str"builtins.str *-
context
builtins.bool"builtins.bool *,
numlines
builtins.int"builtins.int *+
charset
builtins.str"builtins.str z38z39z310z311z312z313*Ü

make_tabledifflib.HtmlDiff.make_table"
builtins.str"builtins.str*.
self$
difflib.HtmlDiff"difflib.HtmlDiff*]
	fromlinesN
typing.Sequence[builtins.str]
builtins.str"builtins.str"typing.Sequence*[
tolinesN
typing.Sequence[builtins.str]
builtins.str"builtins.str"typing.Sequence*,
fromdesc
builtins.str"builtins.str **
todesc
builtins.str"builtins.str *-
context
builtins.bool"builtins.bool *,
numlines
builtins.int"builtins.int z38z39z310z311z312z313j38j39j310j311j312j313ú
IS_LINE_JUNKdifflib.IS_LINE_JUNK"
builtins.bool"builtins.bool*&
line
builtins.str"builtins.str*
pat
Any z38z39z310z311z312z313∏
IS_CHARACTER_JUNKdifflib.IS_CHARACTER_JUNK"
builtins.bool"builtins.bool*$
ch
builtins.str"builtins.str*&
ws
builtins.str"builtins.str z38z39z310z311z312z313œ
unified_diffdifflib.unified_diff"N
typing.Iterator[builtins.str]
builtins.str"builtins.str"typing.Iterator*U
aN
typing.Sequence[builtins.str]
builtins.str"builtins.str"typing.Sequence*U
bN
typing.Sequence[builtins.str]
builtins.str"builtins.str"typing.Sequence*,
fromfile
builtins.str"builtins.str **
tofile
builtins.str"builtins.str *0
fromfiledate
builtins.str"builtins.str *.

tofiledate
builtins.str"builtins.str *%
n
builtins.int"builtins.int *,
lineterm
builtins.str"builtins.str z38z39z310z311z312z313œ
context_diffdifflib.context_diff"N
typing.Iterator[builtins.str]
builtins.str"builtins.str"typing.Iterator*U
aN
typing.Sequence[builtins.str]
builtins.str"builtins.str"typing.Sequence*U
bN
typing.Sequence[builtins.str]
builtins.str"builtins.str"typing.Sequence*,
fromfile
builtins.str"builtins.str **
tofile
builtins.str"builtins.str *0
fromfiledate
builtins.str"builtins.str *.

tofiledate
builtins.str"builtins.str *%
n
builtins.int"builtins.int *,
lineterm
builtins.str"builtins.str z38z39z310z311z312z313‰
ndiffdifflib.ndiff"N
typing.Iterator[builtins.str]
builtins.str"builtins.str"typing.Iterator*U
aN
typing.Sequence[builtins.str]
builtins.str"builtins.str"typing.Sequence*U
bN
typing.Sequence[builtins.str]
builtins.str"builtins.str"typing.Sequence*ó
linejunkÜ
+Union[CallableType[builtins.function],None]K
CallableType[builtins.function]&
builtins.function"builtins.function
None *ó
charjunkÜ
+Union[CallableType[builtins.function],None]K
CallableType[builtins.function]&
builtins.function"builtins.function
None z38z39z310z311z312z313ä
restoredifflib.restore"N
typing.Iterator[builtins.str]
builtins.str"builtins.str"typing.Iterator*Y
deltaN
typing.Iterable[builtins.str]
builtins.str"builtins.str"typing.Iterable*'
which
builtins.int"builtins.intz38z39z310z311z312z313Ó


diff_bytesdifflib.diff_bytes"T
typing.Iterator[builtins.bytes] 
builtins.bytes"builtins.bytes"typing.Iterator*V
dfuncK
CallableType[builtins.function]&
builtins.function"builtins.function*Œ
a∆
9typing.Iterable[Union[builtins.bytes,builtins.bytearray]]x
(Union[builtins.bytes,builtins.bytearray] 
builtins.bytes"builtins.bytes(
builtins.bytearray"builtins.bytearray"typing.Iterable*Œ
b∆
9typing.Iterable[Union[builtins.bytes,builtins.bytearray]]x
(Union[builtins.bytes,builtins.bytearray] 
builtins.bytes"builtins.bytes(
builtins.bytearray"builtins.bytearray"typing.Iterable*à
fromfilex
(Union[builtins.bytes,builtins.bytearray] 
builtins.bytes"builtins.bytes(
builtins.bytearray"builtins.bytearray *Ü
tofilex
(Union[builtins.bytes,builtins.bytearray] 
builtins.bytes"builtins.bytes(
builtins.bytearray"builtins.bytearray *å
fromfiledatex
(Union[builtins.bytes,builtins.bytearray] 
builtins.bytes"builtins.bytes(
builtins.bytearray"builtins.bytearray *ä

tofiledatex
(Union[builtins.bytes,builtins.bytearray] 
builtins.bytes"builtins.bytes(
builtins.bytearray"builtins.bytearray *%
n
builtins.int"builtins.int *à
linetermx
(Union[builtins.bytes,builtins.bytearray] 
builtins.bytes"builtins.bytes(
builtins.bytearray"builtins.bytearray z38z39z310z311z312z313"À	
get_close_matchesdifflib.get_close_matchesÎ
get_close_matchesdifflib.get_close_matches"u
builtins.list[typing.AnyStr]F
typing.AnyStr"
builtins.object"builtins.object"builtins.object"builtins.list*P
wordF
typing.AnyStr"
builtins.object"builtins.object"builtins.object*å
possibilitiesy
typing.Iterable[typing.AnyStr]F
typing.AnyStr"
builtins.object"builtins.object"builtins.object"typing.Iterable*%
n
builtins.int"builtins.int *.
cutoff 
builtins.float"builtins.float 0:overloadXê
get_close_matchesdifflib.get_close_matches"∞
*builtins.list[typing.Sequence[difflib._T]]s
typing.Sequence[difflib._T]C

difflib._T"
builtins.object"builtins.object"builtins.object"typing.Sequence"builtins.list*}
words
typing.Sequence[difflib._T]C

difflib._T"
builtins.object"builtins.object"builtins.object"typing.Sequence*»
possibilities¥
,typing.Iterable[typing.Sequence[difflib._T]]s
typing.Sequence[difflib._T]C

difflib._T"
builtins.object"builtins.object"builtins.object"typing.Sequence"typing.Iterable*%
n
builtins.int"builtins.int *.
cutoff 
builtins.float"builtins.float 0:overloadX"38"39"310"311"312"313*ü
__annotations__difflib.__annotations__W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*38*39*310*311*312*313*Ç
__all__difflib.__all__J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list*38*39*310*311*312*313