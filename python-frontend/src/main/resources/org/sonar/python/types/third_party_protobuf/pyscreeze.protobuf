
	pyscreeze• 
Boxpyscreeze.Box"builtins.tuple*ñ
_replacepyscreeze.Box._replace"Œ
pyscreeze.Box._NT∂
:Tuple[builtins.int,builtins.int,builtins.int,builtins.int]
builtins.int"builtins.int
builtins.int"builtins.int
builtins.int"builtins.int
builtins.int"builtins.int*⁄
_selfŒ
pyscreeze.Box._NT∂
:Tuple[builtins.int,builtins.int,builtins.int,builtins.int]
builtins.int"builtins.int
builtins.int"builtins.int
builtins.int"builtins.int
builtins.int"builtins.int*(
left
builtins.int"builtins.int *'
top
builtins.int"builtins.int *)
width
builtins.int"builtins.int **
height
builtins.int"builtins.int z38z39z310z311z312z313*Ø
__new__pyscreeze.Box.__new__"Œ
pyscreeze.Box._NT∂
:Tuple[builtins.int,builtins.int,builtins.int,builtins.int]
builtins.int"builtins.int
builtins.int"builtins.int
builtins.int"builtins.int
builtins.int"builtins.int*˝
_clsÚ
Type[pyscreeze.Box._NT]Œ
pyscreeze.Box._NT∂
:Tuple[builtins.int,builtins.int,builtins.int,builtins.int]
builtins.int"builtins.int
builtins.int"builtins.int
builtins.int"builtins.int
builtins.int"builtins.int"type*&
left
builtins.int"builtins.int*%
top
builtins.int"builtins.int*'
width
builtins.int"builtins.int*(
height
builtins.int"builtins.intz38z39z310z311z312z313*Ú
_asdictpyscreeze.Box._asdict"W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*⁄
_selfŒ
pyscreeze.Box._NT∂
:Tuple[builtins.int,builtins.int,builtins.int,builtins.int]
builtins.int"builtins.int
builtins.int"builtins.int
builtins.int"builtins.int
builtins.int"builtins.intz38z39z310z311z312z313*Ç
_makepyscreeze.Box._make"Œ
pyscreeze.Box._NT∂
:Tuple[builtins.int,builtins.int,builtins.int,builtins.int]
builtins.int"builtins.int
builtins.int"builtins.int
builtins.int"builtins.int
builtins.int"builtins.int*˝
_clsÚ
Type[pyscreeze.Box._NT]Œ
pyscreeze.Box._NT∂
:Tuple[builtins.int,builtins.int,builtins.int,builtins.int]
builtins.int"builtins.int
builtins.int"builtins.int
builtins.int"builtins.int
builtins.int"builtins.int"type*>
iterable0
typing.Iterable[Any]
Any"typing.Iterable*
new
Any *
len
Any 0:classmethodpz38z39z310z311z312z313j38j39j310j311j312j313rp
leftpyscreeze.Box.left
builtins.int"builtins.int*38*38*39*39*310*310*311*311*312*312*313*313rn
toppyscreeze.Box.top
builtins.int"builtins.int*38*38*39*39*310*310*311*311*312*312*313*313rr
widthpyscreeze.Box.width
builtins.int"builtins.int*38*38*39*39*310*310*311*311*312*312*313*313rt
heightpyscreeze.Box.height
builtins.int"builtins.int*38*38*39*39*310*310*311*311*312*312*313*313rı
_fieldspyscreeze.Box._fields∂
:Tuple[builtins.str,builtins.str,builtins.str,builtins.str]
builtins.str"builtins.str
builtins.str"builtins.str
builtins.str"builtins.str
builtins.str"builtins.str*38*39*310*311*312*313rü
_field_typespyscreeze.Box._field_typesW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*38*39*310*311*312*313r•
_field_defaultspyscreeze.Box._field_defaultsW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*38*39*310*311*312*313rZ
_sourcepyscreeze.Box._source
builtins.str"builtins.str*38*39*310*311*312*313r•
__annotations__pyscreeze.Box.__annotations__W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*38*39*310*311*312*313rã
__match_args__pyscreeze.Box.__match_args__∆
^Tuple[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str*310*311*312*313Œ
Pointpyscreeze.Point"builtins.tuple*ê
_replacepyscreeze.Point._replace"y
pyscreeze.Point._NT`
 Tuple[builtins.int,builtins.int]
builtins.int"builtins.int
builtins.int"builtins.int*Ñ
_selfy
pyscreeze.Point._NT`
 Tuple[builtins.int,builtins.int]
builtins.int"builtins.int
builtins.int"builtins.int*%
x
builtins.int"builtins.int *%
y
builtins.int"builtins.int z38z39z310z311z312z313*Ø
__new__pyscreeze.Point.__new__"y
pyscreeze.Point._NT`
 Tuple[builtins.int,builtins.int]
builtins.int"builtins.int
builtins.int"builtins.int*©
_clsû
Type[pyscreeze.Point._NT]y
pyscreeze.Point._NT`
 Tuple[builtins.int,builtins.int]
builtins.int"builtins.int
builtins.int"builtins.int"type*#
x
builtins.int"builtins.int*#
y
builtins.int"builtins.intz38z39z310z311z312z313*û
_asdictpyscreeze.Point._asdict"W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*Ñ
_selfy
pyscreeze.Point._NT`
 Tuple[builtins.int,builtins.int]
builtins.int"builtins.int
builtins.int"builtins.intz38z39z310z311z312z313*⁄
_makepyscreeze.Point._make"y
pyscreeze.Point._NT`
 Tuple[builtins.int,builtins.int]
builtins.int"builtins.int
builtins.int"builtins.int*©
_clsû
Type[pyscreeze.Point._NT]y
pyscreeze.Point._NT`
 Tuple[builtins.int,builtins.int]
builtins.int"builtins.int
builtins.int"builtins.int"type*>
iterable0
typing.Iterable[Any]
Any"typing.Iterable*
new
Any *
len
Any 0:classmethodpz38z39z310z311z312z313j38j39j310j311j312j313rl
xpyscreeze.Point.x
builtins.int"builtins.int*38*38*39*39*310*310*311*311*312*312*313*313rl
ypyscreeze.Point.y
builtins.int"builtins.int*38*38*39*39*310*310*311*311*312*312*313*313r†
_fieldspyscreeze.Point._fields`
 Tuple[builtins.str,builtins.str]
builtins.str"builtins.str
builtins.str"builtins.str*38*39*310*311*312*313r°
_field_typespyscreeze.Point._field_typesW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*38*39*310*311*312*313rß
_field_defaultspyscreeze.Point._field_defaultsW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*38*39*310*311*312*313r\
_sourcepyscreeze.Point._source
builtins.str"builtins.str*38*39*310*311*312*313rß
__annotations__pyscreeze.Point.__annotations__W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*38*39*310*311*312*313rÔ
__match_args__pyscreeze.Point.__match_args__®
2Tuple[Literal[builtins.str],Literal[builtins.str]]7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str*310*311*312*313≤
RGBpyscreeze.RGB"builtins.tuple*î
_replacepyscreeze.RGB._replace"£
pyscreeze.RGB._NTã
-Tuple[builtins.int,builtins.int,builtins.int]
builtins.int"builtins.int
builtins.int"builtins.int
builtins.int"builtins.int*Ø
_self£
pyscreeze.RGB._NTã
-Tuple[builtins.int,builtins.int,builtins.int]
builtins.int"builtins.int
builtins.int"builtins.int
builtins.int"builtins.int*'
red
builtins.int"builtins.int *)
green
builtins.int"builtins.int *(
blue
builtins.int"builtins.int z38z39z310z311z312z313*Ø
__new__pyscreeze.RGB.__new__"£
pyscreeze.RGB._NTã
-Tuple[builtins.int,builtins.int,builtins.int]
builtins.int"builtins.int
builtins.int"builtins.int
builtins.int"builtins.int*“
_cls«
Type[pyscreeze.RGB._NT]£
pyscreeze.RGB._NTã
-Tuple[builtins.int,builtins.int,builtins.int]
builtins.int"builtins.int
builtins.int"builtins.int
builtins.int"builtins.int"type*%
red
builtins.int"builtins.int*'
green
builtins.int"builtins.int*&
blue
builtins.int"builtins.intz38z39z310z311z312z313*«
_asdictpyscreeze.RGB._asdict"W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*Ø
_self£
pyscreeze.RGB._NTã
-Tuple[builtins.int,builtins.int,builtins.int]
builtins.int"builtins.int
builtins.int"builtins.int
builtins.int"builtins.intz38z39z310z311z312z313*¨
_makepyscreeze.RGB._make"£
pyscreeze.RGB._NTã
-Tuple[builtins.int,builtins.int,builtins.int]
builtins.int"builtins.int
builtins.int"builtins.int
builtins.int"builtins.int*“
_cls«
Type[pyscreeze.RGB._NT]£
pyscreeze.RGB._NTã
-Tuple[builtins.int,builtins.int,builtins.int]
builtins.int"builtins.int
builtins.int"builtins.int
builtins.int"builtins.int"type*>
iterable0
typing.Iterable[Any]
Any"typing.Iterable*
new
Any *
len
Any 0:classmethodpz38z39z310z311z312z313j38j39j310j311j312j313rn
redpyscreeze.RGB.red
builtins.int"builtins.int*38*38*39*39*310*310*311*311*312*312*313*313rr
greenpyscreeze.RGB.green
builtins.int"builtins.int*38*38*39*39*310*310*311*311*312*312*313*313rp
bluepyscreeze.RGB.blue
builtins.int"builtins.int*38*38*39*39*310*310*311*311*312*312*313*313r 
_fieldspyscreeze.RGB._fieldsã
-Tuple[builtins.str,builtins.str,builtins.str]
builtins.str"builtins.str
builtins.str"builtins.str
builtins.str"builtins.str*38*39*310*311*312*313rü
_field_typespyscreeze.RGB._field_typesW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*38*39*310*311*312*313r•
_field_defaultspyscreeze.RGB._field_defaultsW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*38*39*310*311*312*313rZ
_sourcepyscreeze.RGB._source
builtins.str"builtins.str*38*39*310*311*312*313r•
__annotations__pyscreeze.RGB.__annotations__W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*38*39*310*311*312*313rº
__match_args__pyscreeze.RGB.__match_args__˜
HTuple[Literal[builtins.str],Literal[builtins.str],Literal[builtins.str]]7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str7
Literal[builtins.str]	
builtins.str"builtins.str*310*311*312*313b
PyScreezeExceptionpyscreeze.PyScreezeException"builtins.Exceptionj38j39j310j311j312j313t
ImageNotFoundException pyscreeze.ImageNotFoundException"pyscreeze.PyScreezeExceptionj38j39j310j311j312j313ı
requiresPillowpyscreeze.requiresPillow"K
CallableType[builtins.function]&
builtins.function"builtins.function*`
wrappedFunctionK
CallableType[builtins.function]&
builtins.function"builtins.functionz38z39z310z311z312z313˛
showRegionOnScreenpyscreeze.showRegionOnScreen"
None*√
region∂
:Tuple[builtins.int,builtins.int,builtins.int,builtins.int]
builtins.int"builtins.int
builtins.int"builtins.int
builtins.int"builtins.int
builtins.int"builtins.int*0
outlineColor
builtins.str"builtins.str *,
filename
builtins.str"builtins.str z38z39z310z311z312z313°
centerpyscreeze.center"¢
+TypeAlias[Tuple[builtins.int,builtins.int]]`
 Tuple[builtins.int,builtins.int]
builtins.int"builtins.int
builtins.int"builtins.int"pyscreeze.Point*√
coords∂
:Tuple[builtins.int,builtins.int,builtins.int,builtins.int]
builtins.int"builtins.int
builtins.int"builtins.int
builtins.int"builtins.int
builtins.int"builtins.intz38z39z310z311z312z313π
pixelMatchesColorpyscreeze.pixelMatchesColor"
builtins.bool"builtins.bool*#
x
builtins.int"builtins.int*#
y
builtins.int"builtins.int*—
expectedRGBColor∫
oUnion[Tuple[builtins.int,builtins.int,builtins.int],Tuple[builtins.int,builtins.int,builtins.int,builtins.int]]ã
-Tuple[builtins.int,builtins.int,builtins.int]
builtins.int"builtins.int
builtins.int"builtins.int
builtins.int"builtins.int∂
:Tuple[builtins.int,builtins.int,builtins.int,builtins.int]
builtins.int"builtins.int
builtins.int"builtins.int
builtins.int"builtins.int
builtins.int"builtins.int*-
	tolerance
builtins.int"builtins.int z38z39z310z311z312z313å
pixelpyscreeze.pixel"ã
-Tuple[builtins.int,builtins.int,builtins.int]
builtins.int"builtins.int
builtins.int"builtins.int
builtins.int"builtins.int*#
x
builtins.int"builtins.int*#
y
builtins.int"builtins.intz38z39z310z311z312z313µ

screenshotpyscreeze.screenshot"
Any*Ã
imageFilename∂
oUnion[TypeAlias[Union[builtins.str,builtins.bytes,os.PathLike[builtins.str],os.PathLike[builtins.bytes]]],None]∂
cTypeAlias[Union[builtins.str,builtins.bytes,os.PathLike[builtins.str],os.PathLike[builtins.bytes]]]≤
XUnion[builtins.str,builtins.bytes,os.PathLike[builtins.str],os.PathLike[builtins.bytes]]
builtins.str"builtins.str 
builtins.bytes"builtins.bytesF
os.PathLike[builtins.str]
builtins.str"builtins.str"os.PathLikeL
os.PathLike[builtins.bytes] 
builtins.bytes"builtins.bytes"os.PathLike"_typeshed.StrOrBytesPath
None *ú
regionç
FUnion[Tuple[builtins.int,builtins.int,builtins.int,builtins.int],None]∂
:Tuple[builtins.int,builtins.int,builtins.int,builtins.int]
builtins.int"builtins.int
builtins.int"builtins.int
builtins.int"builtins.int
builtins.int"builtins.int
None z38z39z310z311z312z313"Ç
locatepyscreeze.locateå
locatepyscreeze.locate"Û
QUnion[TypeAlias[Tuple[builtins.int,builtins.int,builtins.int,builtins.int]],None]ë
ETypeAlias[Tuple[builtins.int,builtins.int,builtins.int,builtins.int]]∂
:Tuple[builtins.int,builtins.int,builtins.int,builtins.int]
builtins.int"builtins.int
builtins.int"builtins.int
builtins.int"builtins.int
builtins.int"builtins.int"pyscreeze.Box
None*–
needleImageæ
1Union[builtins.str,Any,TypeAlias[TypeAlias[Any]]]
builtins.str"builtins.str
Any`
TypeAlias[TypeAlias[Any]]1
TypeAlias[Any]
Any"_typeshed.Incomplete"pyscreeze._Mat*“
haystackImageæ
1Union[builtins.str,Any,TypeAlias[TypeAlias[Any]]]
builtins.str"builtins.str
Any`
TypeAlias[TypeAlias[Any]]1
TypeAlias[Any]
Any"_typeshed.Incomplete"pyscreeze._Mat*X
	grayscaleG
Union[builtins.bool,None]
builtins.bool"builtins.bool
None */
limit"
builtins.object"builtins.object *ú
regionç
FUnion[Tuple[builtins.int,builtins.int,builtins.int,builtins.int],None]∂
:Tuple[builtins.int,builtins.int,builtins.int,builtins.int]
builtins.int"builtins.int
builtins.int"builtins.int
builtins.int"builtins.int
builtins.int"builtins.int
None *(
step
builtins.int"builtins.int *Ô

confidence‹
HUnion[typing.SupportsFloat,typing_extensions.SupportsIndex,builtins.str],
typing.SupportsFloat"typing.SupportsFloatB
typing_extensions.SupportsIndex"typing_extensions.SupportsIndex
builtins.str"builtins.str 0:overloadX∫
locatepyscreeze.locate"Û
QUnion[TypeAlias[Tuple[builtins.int,builtins.int,builtins.int,builtins.int]],None]ë
ETypeAlias[Tuple[builtins.int,builtins.int,builtins.int,builtins.int]]∂
:Tuple[builtins.int,builtins.int,builtins.int,builtins.int]
builtins.int"builtins.int
builtins.int"builtins.int
builtins.int"builtins.int
builtins.int"builtins.int"pyscreeze.Box
None*S
needleImageB
Union[builtins.str,Any]
builtins.str"builtins.str
Any*U
haystackImageB
Union[builtins.str,Any]
builtins.str"builtins.str
Any*X
	grayscaleG
Union[builtins.bool,None]
builtins.bool"builtins.bool
None */
limit"
builtins.object"builtins.object *ú
regionç
FUnion[Tuple[builtins.int,builtins.int,builtins.int,builtins.int],None]∂
:Tuple[builtins.int,builtins.int,builtins.int,builtins.int]
builtins.int"builtins.int
builtins.int"builtins.int
builtins.int"builtins.int
builtins.int"builtins.int
None *(
step
builtins.int"builtins.int *

confidence
None 0:overloadX"38"39"310"311"312"313"Ë
locateOnScreenpyscreeze.locateOnScreen¯

locateOnScreenpyscreeze.locateOnScreen"Û
QUnion[TypeAlias[Tuple[builtins.int,builtins.int,builtins.int,builtins.int]],None]ë
ETypeAlias[Tuple[builtins.int,builtins.int,builtins.int,builtins.int]]∂
:Tuple[builtins.int,builtins.int,builtins.int,builtins.int]
builtins.int"builtins.int
builtins.int"builtins.int
builtins.int"builtins.int
builtins.int"builtins.int"pyscreeze.Box
None* 
imageæ
1Union[builtins.str,Any,TypeAlias[TypeAlias[Any]]]
builtins.str"builtins.str
Any`
TypeAlias[TypeAlias[Any]]1
TypeAlias[Any]
Any"_typeshed.Incomplete"pyscreeze._Mat*5
minSearchTime 
builtins.float"builtins.float *X
	grayscaleG
Union[builtins.bool,None]
builtins.bool"builtins.bool
None */
limit"
builtins.object"builtins.object *ú
regionç
FUnion[Tuple[builtins.int,builtins.int,builtins.int,builtins.int],None]∂
:Tuple[builtins.int,builtins.int,builtins.int,builtins.int]
builtins.int"builtins.int
builtins.int"builtins.int
builtins.int"builtins.int
builtins.int"builtins.int
None *(
step
builtins.int"builtins.int *Ô

confidence‹
HUnion[typing.SupportsFloat,typing_extensions.SupportsIndex,builtins.str],
typing.SupportsFloat"typing.SupportsFloatB
typing_extensions.SupportsIndex"typing_extensions.SupportsIndex
builtins.str"builtins.str 0:overloadX§
locateOnScreenpyscreeze.locateOnScreen"Û
QUnion[TypeAlias[Tuple[builtins.int,builtins.int,builtins.int,builtins.int]],None]ë
ETypeAlias[Tuple[builtins.int,builtins.int,builtins.int,builtins.int]]∂
:Tuple[builtins.int,builtins.int,builtins.int,builtins.int]
builtins.int"builtins.int
builtins.int"builtins.int
builtins.int"builtins.int
builtins.int"builtins.int"pyscreeze.Box
None*M
imageB
Union[builtins.str,Any]
builtins.str"builtins.str
Any*5
minSearchTime 
builtins.float"builtins.float *X
	grayscaleG
Union[builtins.bool,None]
builtins.bool"builtins.bool
None */
limit"
builtins.object"builtins.object *ú
regionç
FUnion[Tuple[builtins.int,builtins.int,builtins.int,builtins.int],None]∂
:Tuple[builtins.int,builtins.int,builtins.int,builtins.int]
builtins.int"builtins.int
builtins.int"builtins.int
builtins.int"builtins.int
builtins.int"builtins.int
None *(
step
builtins.int"builtins.int *

confidence
None 0:overloadX"38"39"310"311"312"313"¸
locateAllOnScreenpyscreeze.locateAllOnScreenÎ

locateAllOnScreenpyscreeze.locateAllOnScreen"ù
atyping.Generator[TypeAlias[Tuple[builtins.int,builtins.int,builtins.int,builtins.int]],None,None]ë
ETypeAlias[Tuple[builtins.int,builtins.int,builtins.int,builtins.int]]∂
:Tuple[builtins.int,builtins.int,builtins.int,builtins.int]
builtins.int"builtins.int
builtins.int"builtins.int
builtins.int"builtins.int
builtins.int"builtins.int"pyscreeze.Box
None
None"typing.Generator* 
imageæ
1Union[builtins.str,Any,TypeAlias[TypeAlias[Any]]]
builtins.str"builtins.str
Any`
TypeAlias[TypeAlias[Any]]1
TypeAlias[Any]
Any"_typeshed.Incomplete"pyscreeze._Mat*X
	grayscaleG
Union[builtins.bool,None]
builtins.bool"builtins.bool
None *)
limit
builtins.int"builtins.int *ú
regionç
FUnion[Tuple[builtins.int,builtins.int,builtins.int,builtins.int],None]∂
:Tuple[builtins.int,builtins.int,builtins.int,builtins.int]
builtins.int"builtins.int
builtins.int"builtins.int
builtins.int"builtins.int
builtins.int"builtins.int
None *(
step
builtins.int"builtins.int *Ô

confidence‹
HUnion[typing.SupportsFloat,typing_extensions.SupportsIndex,builtins.str],
typing.SupportsFloat"typing.SupportsFloatB
typing_extensions.SupportsIndex"typing_extensions.SupportsIndex
builtins.str"builtins.str 0:overloadXø
locateAllOnScreenpyscreeze.locateAllOnScreen"ù
atyping.Generator[TypeAlias[Tuple[builtins.int,builtins.int,builtins.int,builtins.int]],None,None]ë
ETypeAlias[Tuple[builtins.int,builtins.int,builtins.int,builtins.int]]∂
:Tuple[builtins.int,builtins.int,builtins.int,builtins.int]
builtins.int"builtins.int
builtins.int"builtins.int
builtins.int"builtins.int
builtins.int"builtins.int"pyscreeze.Box
None
None"typing.Generator*M
imageB
Union[builtins.str,Any]
builtins.str"builtins.str
Any*X
	grayscaleG
Union[builtins.bool,None]
builtins.bool"builtins.bool
None *Q
limitD
Union[builtins.int,None]
builtins.int"builtins.int
None *ú
regionç
FUnion[Tuple[builtins.int,builtins.int,builtins.int,builtins.int],None]∂
:Tuple[builtins.int,builtins.int,builtins.int,builtins.int]
builtins.int"builtins.int
builtins.int"builtins.int
builtins.int"builtins.int
builtins.int"builtins.int
None *(
step
builtins.int"builtins.int *

confidence
None 0:overloadX"38"39"310"311"312"313"ˆ
locateCenterOnScreenpyscreeze.locateCenterOnScreen˘	
locateCenterOnScreenpyscreeze.locateCenterOnScreen"Í
7Union[TypeAlias[Tuple[builtins.int,builtins.int]],None]¢
+TypeAlias[Tuple[builtins.int,builtins.int]]`
 Tuple[builtins.int,builtins.int]
builtins.int"builtins.int
builtins.int"builtins.int"pyscreeze.Point
None* 
imageæ
1Union[builtins.str,Any,TypeAlias[TypeAlias[Any]]]
builtins.str"builtins.str
Any`
TypeAlias[TypeAlias[Any]]1
TypeAlias[Any]
Any"_typeshed.Incomplete"pyscreeze._Mat*3
minSearchTime 
builtins.float"builtins.float*X
	grayscaleG
Union[builtins.bool,None]
builtins.bool"builtins.bool
None */
limit"
builtins.object"builtins.object *ú
regionç
FUnion[Tuple[builtins.int,builtins.int,builtins.int,builtins.int],None]∂
:Tuple[builtins.int,builtins.int,builtins.int,builtins.int]
builtins.int"builtins.int
builtins.int"builtins.int
builtins.int"builtins.int
builtins.int"builtins.int
None *(
step
builtins.int"builtins.int *Ô

confidence‹
HUnion[typing.SupportsFloat,typing_extensions.SupportsIndex,builtins.str],
typing.SupportsFloat"typing.SupportsFloatB
typing_extensions.SupportsIndex"typing_extensions.SupportsIndex
builtins.str"builtins.str 0:overloadX•
locateCenterOnScreenpyscreeze.locateCenterOnScreen"Í
7Union[TypeAlias[Tuple[builtins.int,builtins.int]],None]¢
+TypeAlias[Tuple[builtins.int,builtins.int]]`
 Tuple[builtins.int,builtins.int]
builtins.int"builtins.int
builtins.int"builtins.int"pyscreeze.Point
None*M
imageB
Union[builtins.str,Any]
builtins.str"builtins.str
Any*3
minSearchTime 
builtins.float"builtins.float*X
	grayscaleG
Union[builtins.bool,None]
builtins.bool"builtins.bool
None */
limit"
builtins.object"builtins.object *ú
regionç
FUnion[Tuple[builtins.int,builtins.int,builtins.int,builtins.int],None]∂
:Tuple[builtins.int,builtins.int,builtins.int,builtins.int]
builtins.int"builtins.int
builtins.int"builtins.int
builtins.int"builtins.int
builtins.int"builtins.int
None *(
step
builtins.int"builtins.int *

confidence
None 0:overloadX"38"39"310"311"312"313"é
locateOnWindowpyscreeze.locateOnWindowÀ
locateOnWindowpyscreeze.locateOnWindow"Û
QUnion[TypeAlias[Tuple[builtins.int,builtins.int,builtins.int,builtins.int]],None]ë
ETypeAlias[Tuple[builtins.int,builtins.int,builtins.int,builtins.int]]∂
:Tuple[builtins.int,builtins.int,builtins.int,builtins.int]
builtins.int"builtins.int
builtins.int"builtins.int
builtins.int"builtins.int
builtins.int"builtins.int"pyscreeze.Box
None* 
imageæ
1Union[builtins.str,Any,TypeAlias[TypeAlias[Any]]]
builtins.str"builtins.str
Any`
TypeAlias[TypeAlias[Any]]1
TypeAlias[Any]
Any"_typeshed.Incomplete"pyscreeze._Mat*'
title
builtins.str"builtins.str*X
	grayscaleG
Union[builtins.bool,None]
builtins.bool"builtins.bool
None */
limit"
builtins.object"builtins.object *(
step
builtins.int"builtins.int *Ô

confidence‹
HUnion[typing.SupportsFloat,typing_extensions.SupportsIndex,builtins.str],
typing.SupportsFloat"typing.SupportsFloatB
typing_extensions.SupportsIndex"typing_extensions.SupportsIndex
builtins.str"builtins.str 0:overloadX˜
locateOnWindowpyscreeze.locateOnWindow"Û
QUnion[TypeAlias[Tuple[builtins.int,builtins.int,builtins.int,builtins.int]],None]ë
ETypeAlias[Tuple[builtins.int,builtins.int,builtins.int,builtins.int]]∂
:Tuple[builtins.int,builtins.int,builtins.int,builtins.int]
builtins.int"builtins.int
builtins.int"builtins.int
builtins.int"builtins.int
builtins.int"builtins.int"pyscreeze.Box
None*M
imageB
Union[builtins.str,Any]
builtins.str"builtins.str
Any*'
title
builtins.str"builtins.str*X
	grayscaleG
Union[builtins.bool,None]
builtins.bool"builtins.bool
None */
limit"
builtins.object"builtins.object *(
step
builtins.int"builtins.int *

confidence
None 0:overloadX"38"39"310"311"312"313"Ñ
	locateAllpyscreeze.locateAll∂
	locateAllpyscreeze.locateAll"ù
atyping.Generator[TypeAlias[Tuple[builtins.int,builtins.int,builtins.int,builtins.int]],None,None]ë
ETypeAlias[Tuple[builtins.int,builtins.int,builtins.int,builtins.int]]∂
:Tuple[builtins.int,builtins.int,builtins.int,builtins.int]
builtins.int"builtins.int
builtins.int"builtins.int
builtins.int"builtins.int
builtins.int"builtins.int"pyscreeze.Box
None
None"typing.Generator*–
needleImageæ
1Union[builtins.str,Any,TypeAlias[TypeAlias[Any]]]
builtins.str"builtins.str
Any`
TypeAlias[TypeAlias[Any]]1
TypeAlias[Any]
Any"_typeshed.Incomplete"pyscreeze._Mat*“
haystackImageæ
1Union[builtins.str,Any,TypeAlias[TypeAlias[Any]]]
builtins.str"builtins.str
Any`
TypeAlias[TypeAlias[Any]]1
TypeAlias[Any]
Any"_typeshed.Incomplete"pyscreeze._Mat*X
	grayscaleG
Union[builtins.bool,None]
builtins.bool"builtins.bool
None *)
limit
builtins.int"builtins.int *ú
regionç
FUnion[Tuple[builtins.int,builtins.int,builtins.int,builtins.int],None]∂
:Tuple[builtins.int,builtins.int,builtins.int,builtins.int]
builtins.int"builtins.int
builtins.int"builtins.int
builtins.int"builtins.int
builtins.int"builtins.int
None *(
step
builtins.int"builtins.int *Ô

confidence‹
HUnion[typing.SupportsFloat,typing_extensions.SupportsIndex,builtins.str],
typing.SupportsFloat"typing.SupportsFloatB
typing_extensions.SupportsIndex"typing_extensions.SupportsIndex
builtins.str"builtins.str 0:overloadXå	
	locateAllpyscreeze.locateAll"ù
atyping.Generator[TypeAlias[Tuple[builtins.int,builtins.int,builtins.int,builtins.int]],None,None]ë
ETypeAlias[Tuple[builtins.int,builtins.int,builtins.int,builtins.int]]∂
:Tuple[builtins.int,builtins.int,builtins.int,builtins.int]
builtins.int"builtins.int
builtins.int"builtins.int
builtins.int"builtins.int
builtins.int"builtins.int"pyscreeze.Box
None
None"typing.Generator*S
needleImageB
Union[builtins.str,Any]
builtins.str"builtins.str
Any*U
haystackImageB
Union[builtins.str,Any]
builtins.str"builtins.str
Any*X
	grayscaleG
Union[builtins.bool,None]
builtins.bool"builtins.bool
None *Q
limitD
Union[builtins.int,None]
builtins.int"builtins.int
None *ú
regionç
FUnion[Tuple[builtins.int,builtins.int,builtins.int,builtins.int],None]∂
:Tuple[builtins.int,builtins.int,builtins.int,builtins.int]
builtins.int"builtins.int
builtins.int"builtins.int
builtins.int"builtins.int
builtins.int"builtins.int
None *(
step
builtins.int"builtins.int *

confidence
None 0:overloadX"38"39"310"311"312"313*Ü
__path__pyscreeze.__path__J
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list*38*39*310*311*312*313*°
__annotations__pyscreeze.__annotations__W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*38*39*310*311*312*313*\
	useOpenCVpyscreeze.useOpenCV
builtins.bool"builtins.bool*38*39*310*311*312*313*j
RUNNING_PYTHON_2pyscreeze.RUNNING_PYTHON_2
builtins.bool"builtins.bool*38*39*310*311*312*313*l
GRAYSCALE_DEFAULTpyscreeze.GRAYSCALE_DEFAULT
builtins.bool"builtins.bool*38*39*310*311*312*313*`
scrotExistspyscreeze.scrotExists
builtins.bool"builtins.bool*38*39*310*311*312*313*Ñ
USE_IMAGE_NOT_FOUND_EXCEPTION'pyscreeze.USE_IMAGE_NOT_FOUND_EXCEPTION
builtins.bool"builtins.bool*38*39*310*311*312*313*
grabpyscreeze.grabK
CallableType[builtins.function]&
builtins.function"builtins.function*38*39*310*311*312*313