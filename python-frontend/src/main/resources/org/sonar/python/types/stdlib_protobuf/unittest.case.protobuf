
unittest.caseÙ
AbstractSettyping.AbstractSet"typing.Collection*¶
__contains__typing.AbstractSet.__contains__"
builtins.bool"builtins.bool*}
 typing.AbstractSet[typing._T_co]E
typing._T_co"
builtins.object"builtins.object"builtins.object"typing.AbstractSet*$"
builtins.object"builtins.object0:abstractmethod@z38z39z310z311z312z313*Â
_hashtyping.AbstractSet._hash"
builtins.int"builtins.int*á
self}
 typing.AbstractSet[typing._T_co]E
typing._T_co"
builtins.object"builtins.object"builtins.object"typing.AbstractSetz38z39z310z311z312z313*ö
__le__typing.AbstractSet.__le__"
builtins.bool"builtins.bool*}
 typing.AbstractSet[typing._T_co]E
typing._T_co"
builtins.object"builtins.object"builtins.object"typing.AbstractSet*86
typing.AbstractSet[Any]
Any"typing.AbstractSetz38z39z310z311z312z313*ö
__lt__typing.AbstractSet.__lt__"
builtins.bool"builtins.bool*}
 typing.AbstractSet[typing._T_co]E
typing._T_co"
builtins.object"builtins.object"builtins.object"typing.AbstractSet*86
typing.AbstractSet[Any]
Any"typing.AbstractSetz38z39z310z311z312z313*ö
__gt__typing.AbstractSet.__gt__"
builtins.bool"builtins.bool*}
 typing.AbstractSet[typing._T_co]E
typing._T_co"
builtins.object"builtins.object"builtins.object"typing.AbstractSet*86
typing.AbstractSet[Any]
Any"typing.AbstractSetz38z39z310z311z312z313*ö
__ge__typing.AbstractSet.__ge__"
builtins.bool"builtins.bool*}
 typing.AbstractSet[typing._T_co]E
typing._T_co"
builtins.object"builtins.object"builtins.object"typing.AbstractSet*86
typing.AbstractSet[Any]
Any"typing.AbstractSetz38z39z310z311z312z313*˚
__and__typing.AbstractSet.__and__"}
 typing.AbstractSet[typing._T_co]E
typing._T_co"
builtins.object"builtins.object"builtins.object"typing.AbstractSet*}
 typing.AbstractSet[typing._T_co]E
typing._T_co"
builtins.object"builtins.object"builtins.object"typing.AbstractSet*86
typing.AbstractSet[Any]
Any"typing.AbstractSetz38z39z310z311z312z313*¥
__or__typing.AbstractSet.__or__"ˆ
1typing.AbstractSet[Union[typing._T_co,typing._T]]¨
Union[typing._T_co,typing._T]E
typing._T_co"
builtins.object"builtins.object"builtins.objectB
	typing._T"
builtins.object"builtins.object"builtins.object"typing.AbstractSet*}
 typing.AbstractSet[typing._T_co]E
typing._T_co"
builtins.object"builtins.object"builtins.object"typing.AbstractSet*yw
typing.AbstractSet[typing._T]B
	typing._T"
builtins.object"builtins.object"builtins.object"typing.AbstractSetz38z39z310z311z312z313*˚
__sub__typing.AbstractSet.__sub__"}
 typing.AbstractSet[typing._T_co]E
typing._T_co"
builtins.object"builtins.object"builtins.object"typing.AbstractSet*}
 typing.AbstractSet[typing._T_co]E
typing._T_co"
builtins.object"builtins.object"builtins.object"typing.AbstractSet*86
typing.AbstractSet[Any]
Any"typing.AbstractSetz38z39z310z311z312z313*∂
__xor__typing.AbstractSet.__xor__"ˆ
1typing.AbstractSet[Union[typing._T_co,typing._T]]¨
Union[typing._T_co,typing._T]E
typing._T_co"
builtins.object"builtins.object"builtins.objectB
	typing._T"
builtins.object"builtins.object"builtins.object"typing.AbstractSet*}
 typing.AbstractSet[typing._T_co]E
typing._T_co"
builtins.object"builtins.object"builtins.object"typing.AbstractSet*yw
typing.AbstractSet[typing._T]B
	typing._T"
builtins.object"builtins.object"builtins.object"typing.AbstractSetz38z39z310z311z312z313*Æ

isdisjointtyping.AbstractSet.isdisjoint"
builtins.bool"builtins.bool*á
self}
 typing.AbstractSet[typing._T_co]E
typing._T_co"
builtins.object"builtins.object"builtins.object"typing.AbstractSet*;
other0
typing.Iterable[Any]
Any"typing.Iterablez38z39z310z311z312z313Pj38j39j310j311j312j313‹
_BaseTestCaseContext"unittest.case._BaseTestCaseContext"builtins.object*Ú
__init__+unittest.case._BaseTestCaseContext.__init__"
None*R
selfH
"unittest.case._BaseTestCaseContext""unittest.case._BaseTestCaseContext*?
	test_case0
unittest.case.TestCase"unittest.case.TestCasez38z39z310z311z312z313j38j39j310j311j312j313õ
_LoggingWatcherunittest.case._LoggingWatcher"builtins.tuple*∏
_replace&unittest.case._LoggingWatcher._replace"ñ
!unittest.case._LoggingWatcher._NTÓ
CTuple[builtins.list[logging.LogRecord],builtins.list[builtins.str]]Y
 builtins.list[logging.LogRecord]&
logging.LogRecord"logging.LogRecord"builtins.listJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list*¢
_selfñ
!unittest.case._LoggingWatcher._NTÓ
CTuple[builtins.list[logging.LogRecord],builtins.list[builtins.str]]Y
 builtins.list[logging.LogRecord]&
logging.LogRecord"logging.LogRecord"builtins.listJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list*h
recordsY
 builtins.list[logging.LogRecord]&
logging.LogRecord"logging.LogRecord"builtins.list *X
outputJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list z38*Â
__new__%unittest.case._LoggingWatcher.__new__"ñ
!unittest.case._LoggingWatcher._NTÓ
CTuple[builtins.list[logging.LogRecord],builtins.list[builtins.str]]Y
 builtins.list[logging.LogRecord]&
logging.LogRecord"logging.LogRecord"builtins.listJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list*’
_cls 
'Type[unittest.case._LoggingWatcher._NT]ñ
!unittest.case._LoggingWatcher._NTÓ
CTuple[builtins.list[logging.LogRecord],builtins.list[builtins.str]]Y
 builtins.list[logging.LogRecord]&
logging.LogRecord"logging.LogRecord"builtins.listJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list"type*f
recordsY
 builtins.list[logging.LogRecord]&
logging.LogRecord"logging.LogRecord"builtins.list*V
outputJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.listz38*≤
_asdict%unittest.case._LoggingWatcher._asdict"W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*¢
_selfñ
!unittest.case._LoggingWatcher._NTÓ
CTuple[builtins.list[logging.LogRecord],builtins.list[builtins.str]]Y
 builtins.list[logging.LogRecord]&
logging.LogRecord"logging.LogRecord"builtins.listJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.listz38*ö
_make#unittest.case._LoggingWatcher._make"ñ
!unittest.case._LoggingWatcher._NTÓ
CTuple[builtins.list[logging.LogRecord],builtins.list[builtins.str]]Y
 builtins.list[logging.LogRecord]&
logging.LogRecord"logging.LogRecord"builtins.listJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list*’
_cls 
'Type[unittest.case._LoggingWatcher._NT]ñ
!unittest.case._LoggingWatcher._NTÓ
CTuple[builtins.list[logging.LogRecord],builtins.list[builtins.str]]Y
 builtins.list[logging.LogRecord]&
logging.LogRecord"logging.LogRecord"builtins.listJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list"type*>
iterable0
typing.Iterable[Any]
Any"typing.Iterable*
new
Any *
len
Any 0:classmethodpz38j38rì
records%unittest.case._LoggingWatcher.recordsY
 builtins.list[logging.LogRecord]&
logging.LogRecord"logging.LogRecord"builtins.list*38*38rÇ
output$unittest.case._LoggingWatcher.outputJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list*38*38rñ
_fields%unittest.case._LoggingWatcher._fields`
 Tuple[builtins.str,builtins.str]
builtins.str"builtins.str
builtins.str"builtins.str*38ró
_field_types*unittest.case._LoggingWatcher._field_typesW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*38rù
_field_defaults-unittest.case._LoggingWatcher._field_defaultsW
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*38rR
_source%unittest.case._LoggingWatcher._source
builtins.str"builtins.str*38rù
__annotations__-unittest.case._LoggingWatcher.__annotations__W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*38˛
_AssertLogsContext unittest.case._AssertLogsContext""unittest.case._BaseTestCaseContext*ã
__init__)unittest.case._AssertLogsContext.__init__"
None*¨
self°
2unittest.case._AssertLogsContext[unittest.case._L]I
unittest.case._L"
builtins.object"builtins.object"builtins.object" unittest.case._AssertLogsContext*?
	test_case0
unittest.case.TestCase"unittest.case.TestCase*-
logger_name
builtins.str"builtins.str*'
level
builtins.int"builtins.intz38*«
	__enter__*unittest.case._AssertLogsContext.__enter__"‚
NTypeAlias[Tuple[builtins.list[logging.LogRecord],builtins.list[builtins.str]]]Ó
CTuple[builtins.list[logging.LogRecord],builtins.list[builtins.str]]Y
 builtins.list[logging.LogRecord]&
logging.LogRecord"logging.LogRecord"builtins.listJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list"unittest.case._LoggingWatcher*§°
2unittest.case._AssertLogsContext[unittest.case._L]I
unittest.case._L"
builtins.object"builtins.object"builtins.object" unittest.case._AssertLogsContextz38*Ç
__exit__)unittest.case._AssertLogsContext.__exit__"G
Union[builtins.bool,None]
builtins.bool"builtins.bool
None*§°
2unittest.case._AssertLogsContext[unittest.case._L]I
unittest.case._L"
builtins.object"builtins.object"builtins.object" unittest.case._AssertLogsContext*ìê
(Union[Type[builtins.BaseException],None]X
Type[builtins.BaseException]0
builtins.BaseException"builtins.BaseException"type
None*db
"Union[builtins.BaseException,None]0
builtins.BaseException"builtins.BaseException
None*[Y
Union[types.TracebackType,None]*
types.TracebackType"types.TracebackType
Nonez38Pj38rc
LOGGING_FORMAT/unittest.case._AssertLogsContext.LOGGING_FORMAT
builtins.str"builtins.str*38rm
	test_case*unittest.case._AssertLogsContext.test_case0
unittest.case.TestCase"unittest.case.TestCase*38r]
logger_name,unittest.case._AssertLogsContext.logger_name
builtins.str"builtins.str*38rQ
level&unittest.case._AssertLogsContext.level
builtins.int"builtins.int*38r9
msg$unittest.case._AssertLogsContext.msg
None*38å
SkipTestunittest.case.SkipTest"builtins.Exception*∑
__init__unittest.case.SkipTest.__init__"
None*:
self0
unittest.case.SkipTest"unittest.case.SkipTest*(
reason
builtins.str"builtins.strz38z39z310z311z312z313j38j39j310j311j312j313é
_SupportsAbsAndDunderGE%unittest.case._SupportsAbsAndDunderGE"_typeshed.SupportsDunderGE"typing.SupportsAbsXj38j39j310j311j312j313∏ê
TestCaseunittest.case.TestCase"builtins.object*Ω
__init__unittest.case.TestCase.__init__"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*.

methodName
builtins.str"builtins.str z38z39z310z311z312z313*Ω
__eq__unittest.case.TestCase.__eq__"
builtins.bool"builtins.bool*20
unittest.case.TestCase"unittest.case.TestCase*$"
builtins.object"builtins.objectz38z39z310z311z312z313*á
setUpunittest.case.TestCase.setUp"
None*:
self0
unittest.case.TestCase"unittest.case.TestCasez38z39z310z311z312z313*ç
tearDownunittest.case.TestCase.tearDown"
None*:
self0
unittest.case.TestCase"unittest.case.TestCasez38z39z310z311z312z313*…

setUpClass!unittest.case.TestCase.setUpClass"
None*a
clsX
Type[unittest.case.TestCase]0
unittest.case.TestCase"unittest.case.TestCase"type0:classmethodpz38z39z310z311z312z313*œ
tearDownClass$unittest.case.TestCase.tearDownClass"
None*a
clsX
Type[unittest.case.TestCase]0
unittest.case.TestCase"unittest.case.TestCase"type0:classmethodpz38z39z310z311z312z313*Á
rununittest.case.TestCase.run"n
&Union[unittest.result.TestResult,None]8
unittest.result.TestResult"unittest.result.TestResult
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*|
resultn
&Union[unittest.result.TestResult,None]8
unittest.result.TestResult"unittest.result.TestResult
None z38z39z310z311z312z313*Ò
__call__unittest.case.TestCase.__call__"n
&Union[unittest.result.TestResult,None]8
unittest.result.TestResult"unittest.result.TestResult
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*|
resultn
&Union[unittest.result.TestResult,None]8
unittest.result.TestResult"unittest.result.TestResult
None z38z39z310z311z312z313*¶
skipTestunittest.case.TestCase.skipTest"
NoReturn
*:
self0
unittest.case.TestCase"unittest.case.TestCase*
reason
Anyz38z39z310z311z312z313*Ç
subTestunittest.case.TestCase.subTest"V
'contextlib.AbstractContextManager[None]
None"!contextlib.AbstractContextManager*:
self0
unittest.case.TestCase"unittest.case.TestCase*
msg
Any *
params
Anyz38z39z310z311z312z313*á
debugunittest.case.TestCase.debug"
None*:
self0
unittest.case.TestCase"unittest.case.TestCasez38z39z310z311z312z313*Ø
_addSkipunittest.case.TestCase._addSkip"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*D
result8
unittest.result.TestResult"unittest.result.TestResult*?
	test_case0
unittest.case.TestCase"unittest.case.TestCase*(
reason
builtins.str"builtins.strz38z39z310*–
assertEqual"unittest.case.TestCase.assertEqual"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*
first
Any*
second
Any*
msg
Any z38z39z310z311z312z313*÷
assertNotEqual%unittest.case.TestCase.assertNotEqual"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*
first
Any*
second
Any*
msg
Any z38z39z310z311z312z313*∏

assertTrue!unittest.case.TestCase.assertTrue"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*
expr
Any*
msg
Any z38z39z310z311z312z313*∫
assertFalse"unittest.case.TestCase.assertFalse"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*
expr
Any*
msg
Any z38z39z310z311z312z313*ˇ
assertIsunittest.case.TestCase.assertIs"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*-
expr1"
builtins.object"builtins.object*-
expr2"
builtins.object"builtins.object*
msg
Any z38z39z310z311z312z313*Ö
assertIsNot"unittest.case.TestCase.assertIsNot"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*-
expr1"
builtins.object"builtins.object*-
expr2"
builtins.object"builtins.object*
msg
Any z38z39z310z311z312z313*÷
assertIsNone#unittest.case.TestCase.assertIsNone"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*+
obj"
builtins.object"builtins.object*
msg
Any z38z39z310z311z312z313*‹
assertIsNotNone&unittest.case.TestCase.assertIsNotNone"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*+
obj"
builtins.object"builtins.object*
msg
Any z38z39z310z311z312z313*‰
assertInunittest.case.TestCase.assertIn"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*
member
Any*´
	containerõ
1Union[typing.Iterable[Any],typing.Container[Any]]0
typing.Iterable[Any]
Any"typing.Iterable2
typing.Container[Any]
Any"typing.Container*
msg
Any z38z39z310z311z312z313*Í
assertNotIn"unittest.case.TestCase.assertNotIn"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*
member
Any*´
	containerõ
1Union[typing.Iterable[Any],typing.Container[Any]]0
typing.Iterable[Any]
Any"typing.Iterable2
typing.Container[Any]
Any"typing.Container*
msg
Any z38z39z310z311z312z313*´
assertIsInstance'unittest.case.TestCase.assertIsInstance"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*+
obj"
builtins.object"builtins.object*ﬁ
cls‘
7TypeAlias[Union[builtins.type,builtins.tuple[Unknown]]]}
,Union[builtins.type,builtins.tuple[Unknown]]
builtins.type"builtins.type+
builtins.tuple[Unknown] "builtins.tuple"unittest.case._ClassInfo*
msg
Any z38z39*¸
assertIsInstance'unittest.case.TestCase.assertIsInstance"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*+
obj"
builtins.object"builtins.object*£
clsô
GTypeAlias[Union[builtins.type,types.UnionType,builtins.tuple[Unknown]]]±
<Union[builtins.type,types.UnionType,builtins.tuple[Unknown]]
builtins.type"builtins.type"
types.UnionType"types.UnionType+
builtins.tuple[Unknown] "builtins.tuple"unittest.case._ClassInfo*
msg
Any z310z311z312z313*±
assertNotIsInstance*unittest.case.TestCase.assertNotIsInstance"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*+
obj"
builtins.object"builtins.object*ﬁ
cls‘
7TypeAlias[Union[builtins.type,builtins.tuple[Unknown]]]}
,Union[builtins.type,builtins.tuple[Unknown]]
builtins.type"builtins.type+
builtins.tuple[Unknown] "builtins.tuple"unittest.case._ClassInfo*
msg
Any z38z39*Ç
assertNotIsInstance*unittest.case.TestCase.assertNotIsInstance"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*+
obj"
builtins.object"builtins.object*£
clsô
GTypeAlias[Union[builtins.type,types.UnionType,builtins.tuple[Unknown]]]±
<Union[builtins.type,types.UnionType,builtins.tuple[Unknown]]
builtins.type"builtins.type"
types.UnionType"types.UnionType+
builtins.tuple[Unknown] "builtins.tuple"unittest.case._ClassInfo*
msg
Any z310z311z312z313*Ô

assertLogs!unittest.case.TestCase.assertLogs"˘
punittest.case._AssertLogsContext[TypeAlias[Tuple[builtins.list[logging.LogRecord],builtins.list[builtins.str]]]]‚
NTypeAlias[Tuple[builtins.list[logging.LogRecord],builtins.list[builtins.str]]]Ó
CTuple[builtins.list[logging.LogRecord],builtins.list[builtins.str]]Y
 builtins.list[logging.LogRecord]&
logging.LogRecord"logging.LogRecord"builtins.listJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list"unittest.case._LoggingWatcher" unittest.case._AssertLogsContext*:
self0
unittest.case.TestCase"unittest.case.TestCase*É
loggeru
'Union[builtins.str,logging.Logger,None]
builtins.str"builtins.str 
logging.Logger"logging.Logger
None *|
levelo
%Union[builtins.int,builtins.str,None]
builtins.int"builtins.int
builtins.str"builtins.str
None z38*É

assertLogs!unittest.case.TestCase.assertLogs"˘
punittest._log._AssertLogsContext[TypeAlias[Tuple[builtins.list[logging.LogRecord],builtins.list[builtins.str]]]]‚
NTypeAlias[Tuple[builtins.list[logging.LogRecord],builtins.list[builtins.str]]]Ó
CTuple[builtins.list[logging.LogRecord],builtins.list[builtins.str]]Y
 builtins.list[logging.LogRecord]&
logging.LogRecord"logging.LogRecord"builtins.listJ
builtins.list[builtins.str]
builtins.str"builtins.str"builtins.list"unittest._log._LoggingWatcher" unittest._log._AssertLogsContext*:
self0
unittest.case.TestCase"unittest.case.TestCase*É
loggeru
'Union[builtins.str,logging.Logger,None]
builtins.str"builtins.str 
logging.Logger"logging.Logger
None *|
levelo
%Union[builtins.int,builtins.str,None]
builtins.int"builtins.int
builtins.str"builtins.str
None z39z310z311z312z313*¸
assertRegex"unittest.case.TestCase.assertRegex"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*P
textF
typing.AnyStr"
builtins.object"builtins.object"builtins.object*Ä
expected_regexÎ
.Union[typing.AnyStr,re.Pattern[typing.AnyStr]]F
typing.AnyStr"
builtins.object"builtins.object"builtins.objecto
re.Pattern[typing.AnyStr]F
typing.AnyStr"
builtins.object"builtins.object"builtins.object"
re.Pattern*
msg
Any z38z39z310z311z312z313*Ñ
assertNotRegex%unittest.case.TestCase.assertNotRegex"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*P
textF
typing.AnyStr"
builtins.object"builtins.object"builtins.object*Ç
unexpected_regexÎ
.Union[typing.AnyStr,re.Pattern[typing.AnyStr]]F
typing.AnyStr"
builtins.object"builtins.object"builtins.objecto
re.Pattern[typing.AnyStr]F
typing.AnyStr"
builtins.object"builtins.object"builtins.object"
re.Pattern*
msg
Any z38z39z310z311z312z313*¨
assertCountEqual'unittest.case.TestCase.assertCountEqual"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*;
first0
typing.Iterable[Any]
Any"typing.Iterable*<
second0
typing.Iterable[Any]
Any"typing.Iterable*
msg
Any z38z39z310z311z312z313*©
addTypeEqualityFunc*unittest.case.TestCase.addTypeEqualityFunc"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*)
typeobj
	Type[Any]
Any"type*Y
functionK
CallableType[builtins.function]&
builtins.function"builtins.functionz38z39z310z311z312z313*å
assertMultiLineEqual+unittest.case.TestCase.assertMultiLineEqual"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*'
first
builtins.str"builtins.str*(
second
builtins.str"builtins.str*
msg
Any z38z39z310z311z312z313*œ
assertSequenceEqual*unittest.case.TestCase.assertSequenceEqual"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*:
seq10
typing.Sequence[Any]
Any"typing.Sequence*:
seq20
typing.Sequence[Any]
Any"typing.Sequence*
msg
Any *ù
seq_typeå
&Union[Type[typing.Sequence[Any]],None]V
Type[typing.Sequence[Any]]0
typing.Sequence[Any]
Any"typing.Sequence"type
None z38z39z310z311z312z313*°
assertListEqual&unittest.case.TestCase.assertListEqual"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*7
list1,
builtins.list[Any]
Any"builtins.list*7
list2,
builtins.list[Any]
Any"builtins.list*
msg
Any z38z39z310z311z312z313*©
assertTupleEqual'unittest.case.TestCase.assertTupleEqual"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*:
tuple1.
builtins.tuple[Any]
Any"builtins.tuple*:
tuple2.
builtins.tuple[Any]
Any"builtins.tuple*
msg
Any z38z39z310z311z312z313*ˇ
assertSetEqual%unittest.case.TestCase.assertSetEqual"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*g
set1]
#typing.AbstractSet[builtins.object]"
builtins.object"builtins.object"typing.AbstractSet*g
set2]
#typing.AbstractSet[builtins.object]"
builtins.object"builtins.object"typing.AbstractSet*
msg
Any z38z39z310z311z312z313*á
assertDictEqual&unittest.case.TestCase.assertDictEqual"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*j
d1b
#typing.Mapping[Any,builtins.object]
Any"
builtins.object"builtins.object"typing.Mapping*j
d2b
#typing.Mapping[Any,builtins.object]
Any"
builtins.object"builtins.object"typing.Mapping*
msg
Any z38z39z310z311z312z313*ù
failunittest.case.TestCase.fail"
NoReturn
*:
self0
unittest.case.TestCase"unittest.case.TestCase*
msg
Any z38z39z310z311z312z313*≠
countTestCases%unittest.case.TestCase.countTestCases"
builtins.int"builtins.int*:
self0
unittest.case.TestCase"unittest.case.TestCasez38z39z310z311z312z313*œ
defaultTestResult(unittest.case.TestCase.defaultTestResult"8
unittest.result.TestResult"unittest.result.TestResult*:
self0
unittest.case.TestCase"unittest.case.TestCasez38z39z310z311z312z313*ï
idunittest.case.TestCase.id"
builtins.str"builtins.str*:
self0
unittest.case.TestCase"unittest.case.TestCasez38z39z310z311z312z313*Ÿ
shortDescription'unittest.case.TestCase.shortDescription"D
Union[builtins.str,None]
builtins.str"builtins.str
None*:
self0
unittest.case.TestCase"unittest.case.TestCasez38z39z310z311z312z313*˙

addCleanup!unittest.case.TestCase.addCleanup"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*MK
CallableType[builtins.function]&
builtins.function"builtins.function*

args *
kwargs z38z39z310z311z312z313*ë

doCleanups!unittest.case.TestCase.doCleanups"
None*:
self0
unittest.case.TestCase"unittest.case.TestCasez38z39z310z311z312z313*º
addClassCleanup&unittest.case.TestCase.addClassCleanup"
None*a
clsX
Type[unittest.case.TestCase]0
unittest.case.TestCase"unittest.case.TestCase"type*MK
CallableType[builtins.function]&
builtins.function"builtins.function*

args *
kwargs 0:classmethodpz38z39z310z311z312z313*”
doClassCleanups&unittest.case.TestCase.doClassCleanups"
None*a
clsX
Type[unittest.case.TestCase]0
unittest.case.TestCase"unittest.case.TestCase"type0:classmethodpz38z39z310z311z312z313*´
_formatMessage%unittest.case.TestCase._formatMessage"
builtins.str"builtins.str*:
self0
unittest.case.TestCase"unittest.case.TestCase*M
msgD
Union[builtins.str,None]
builtins.str"builtins.str
None*-
standardMsg
builtins.str"builtins.strz38z39z310z311z312z313*ï
_getAssertEqualityFunc-unittest.case.TestCase._getAssertEqualityFunc"K
CallableType[builtins.function]&
builtins.function"builtins.function*:
self0
unittest.case.TestCase"unittest.case.TestCase*
first
Any*
second
Anyz38z39z310z311z312z313*Ë
assertDictContainsSubset/unittest.case.TestCase.assertDictContainsSubset"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*G
subset;
typing.Mapping[Any,Any]
Any
Any"typing.Mapping*K

dictionary;
typing.Mapping[Any,Any]
Any
Any"typing.Mapping*-
msg"
builtins.object"builtins.object z38z39z310z311*›
assertNoLogs#unittest.case.TestCase.assertNoLogs"T
&unittest._log._AssertLogsContext[None]
None" unittest._log._AssertLogsContext*:
self0
unittest.case.TestCase"unittest.case.TestCase*É
loggeru
'Union[builtins.str,logging.Logger,None]
builtins.str"builtins.str 
logging.Logger"logging.Logger
None *|
levelo
%Union[builtins.int,builtins.str,None]
builtins.int"builtins.int
builtins.str"builtins.str
None z310z311z312z313*¯
enterContext#unittest.case.TestCase.enterContext"I
unittest.case._T"
builtins.object"builtins.object"builtins.object*:
self0
unittest.case.TestCase"unittest.case.TestCase*¨
cm£
3contextlib.AbstractContextManager[unittest.case._T]I
unittest.case._T"
builtins.object"builtins.object"builtins.object"!contextlib.AbstractContextManagerz311z312z313*∫
enterClassContext(unittest.case.TestCase.enterClassContext"I
unittest.case._T"
builtins.object"builtins.object"builtins.object*a
clsX
Type[unittest.case.TestCase]0
unittest.case.TestCase"unittest.case.TestCase"type*¨
cm£
3contextlib.AbstractContextManager[unittest.case._T]I
unittest.case._T"
builtins.object"builtins.object"builtins.object"!contextlib.AbstractContextManager0:classmethodpz311z312z3132ı
assertGreater$unittest.case.TestCase.assertGreaterè
assertGreater$unittest.case.TestCase.assertGreater"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*ù
aï
,_typeshed.SupportsDunderGT[unittest.case._T]I
unittest.case._T"
builtins.object"builtins.object"builtins.object"_typeshed.SupportsDunderGT*P
bI
unittest.case._T"
builtins.object"builtins.object"builtins.object*
msg
Any 0:overloadXè
assertGreater$unittest.case.TestCase.assertGreater"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*P
aI
unittest.case._T"
builtins.object"builtins.object"builtins.object*ù
bï
,_typeshed.SupportsDunderLT[unittest.case._T]I
unittest.case._T"
builtins.object"builtins.object"builtins.object"_typeshed.SupportsDunderLT*
msg
Any 0:overloadX"38"39"310"311"312"3132ì
assertGreaterEqual)unittest.case.TestCase.assertGreaterEqualô
assertGreaterEqual)unittest.case.TestCase.assertGreaterEqual"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*ù
aï
,_typeshed.SupportsDunderGE[unittest.case._T]I
unittest.case._T"
builtins.object"builtins.object"builtins.object"_typeshed.SupportsDunderGE*P
bI
unittest.case._T"
builtins.object"builtins.object"builtins.object*
msg
Any 0:overloadXô
assertGreaterEqual)unittest.case.TestCase.assertGreaterEqual"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*P
aI
unittest.case._T"
builtins.object"builtins.object"builtins.object*ù
bï
,_typeshed.SupportsDunderLE[unittest.case._T]I
unittest.case._T"
builtins.object"builtins.object"builtins.object"_typeshed.SupportsDunderLE*
msg
Any 0:overloadX"38"39"310"311"312"3132„

assertLess!unittest.case.TestCase.assertLessâ

assertLess!unittest.case.TestCase.assertLess"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*ù
aï
,_typeshed.SupportsDunderLT[unittest.case._T]I
unittest.case._T"
builtins.object"builtins.object"builtins.object"_typeshed.SupportsDunderLT*P
bI
unittest.case._T"
builtins.object"builtins.object"builtins.object*
msg
Any 0:overloadXâ

assertLess!unittest.case.TestCase.assertLess"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*P
aI
unittest.case._T"
builtins.object"builtins.object"builtins.object*ù
bï
,_typeshed.SupportsDunderGT[unittest.case._T]I
unittest.case._T"
builtins.object"builtins.object"builtins.object"_typeshed.SupportsDunderGT*
msg
Any 0:overloadX"38"39"310"311"312"3132Å
assertLessEqual&unittest.case.TestCase.assertLessEqualì
assertLessEqual&unittest.case.TestCase.assertLessEqual"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*ù
aï
,_typeshed.SupportsDunderLT[unittest.case._T]I
unittest.case._T"
builtins.object"builtins.object"builtins.object"_typeshed.SupportsDunderLT*P
bI
unittest.case._T"
builtins.object"builtins.object"builtins.object*
msg
Any 0:overloadXì
assertLessEqual&unittest.case.TestCase.assertLessEqual"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*P
aI
unittest.case._T"
builtins.object"builtins.object"builtins.object*ù
bï
,_typeshed.SupportsDunderGT[unittest.case._T]I
unittest.case._T"
builtins.object"builtins.object"builtins.object"_typeshed.SupportsDunderGT*
msg
Any 0:overloadX"38"39"310"311"312"3132∑
assertRaises#unittest.case.TestCase.assertRaisesÔ
assertRaises#unittest.case.TestCase.assertRaises"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*‚
expected_exception…
PUnion[Type[builtins.BaseException],builtins.tuple[Type[builtins.BaseException]]]X
Type[builtins.BaseException]0
builtins.BaseException"builtins.BaseException"typeò
,builtins.tuple[Type[builtins.BaseException]]X
Type[builtins.BaseException]0
builtins.BaseException"builtins.BaseException"type"builtins.tuple*Y
callableK
CallableType[builtins.function]&
builtins.function"builtins.function*
args
Any*
kwargs
Any0:overloadXÛ
assertRaises#unittest.case.TestCase.assertRaises"∫
4unittest.case._AssertRaisesContext[unittest.case._E]^
unittest.case._E0
builtins.BaseException"builtins.BaseException"builtins.BaseException""unittest.case._AssertRaisesContext*:
self0
unittest.case.TestCase"unittest.case.TestCase*¢
expected_exceptionâ
DUnion[Type[unittest.case._E],builtins.tuple[Type[unittest.case._E]]]Ä
Type[unittest.case._E]^
unittest.case._E0
builtins.BaseException"builtins.BaseException"builtins.BaseException"typeª
&builtins.tuple[Type[unittest.case._E]]Ä
Type[unittest.case._E]^
unittest.case._E0
builtins.BaseException"builtins.BaseException"builtins.BaseException"type"builtins.tuple*
msg
Any 0:overloadX"38"39"310"311"312"3132≠
assertRaisesRegex(unittest.case.TestCase.assertRaisesRegex•
assertRaisesRegex(unittest.case.TestCase.assertRaisesRegex"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*‚
expected_exception…
PUnion[Type[builtins.BaseException],builtins.tuple[Type[builtins.BaseException]]]X
Type[builtins.BaseException]0
builtins.BaseException"builtins.BaseException"typeò
,builtins.tuple[Type[builtins.BaseException]]X
Type[builtins.BaseException]0
builtins.BaseException"builtins.BaseException"type"builtins.tuple*©
expected_regexî
,Union[builtins.str,re.Pattern[builtins.str]]
builtins.str"builtins.strD
re.Pattern[builtins.str]
builtins.str"builtins.str"
re.Pattern*Y
callableK
CallableType[builtins.function]&
builtins.function"builtins.function*
args
Any*
kwargs
Any0:overloadX©
assertRaisesRegex(unittest.case.TestCase.assertRaisesRegex"∫
4unittest.case._AssertRaisesContext[unittest.case._E]^
unittest.case._E0
builtins.BaseException"builtins.BaseException"builtins.BaseException""unittest.case._AssertRaisesContext*:
self0
unittest.case.TestCase"unittest.case.TestCase*¢
expected_exceptionâ
DUnion[Type[unittest.case._E],builtins.tuple[Type[unittest.case._E]]]Ä
Type[unittest.case._E]^
unittest.case._E0
builtins.BaseException"builtins.BaseException"builtins.BaseException"typeª
&builtins.tuple[Type[unittest.case._E]]Ä
Type[unittest.case._E]^
unittest.case._E0
builtins.BaseException"builtins.BaseException"builtins.BaseException"type"builtins.tuple*©
expected_regexî
,Union[builtins.str,re.Pattern[builtins.str]]
builtins.str"builtins.strD
re.Pattern[builtins.str]
builtins.str"builtins.str"
re.Pattern*
msg
Any 0:overloadX"38"39"310"311"312"3132˛
assertWarns"unittest.case.TestCase.assertWarnsß
assertWarns"unittest.case.TestCase.assertWarns"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*™
expected_warningì
DUnion[Type[builtins.Warning],builtins.tuple[Type[builtins.Warning]]]F
Type[builtins.Warning]$
builtins.Warning"builtins.Warning"typeÄ
&builtins.tuple[Type[builtins.Warning]]F
Type[builtins.Warning]$
builtins.Warning"builtins.Warning"type"builtins.tuple*Y
callableK
CallableType[builtins.function]&
builtins.function"builtins.function*

args *
kwargs 0:overloadXÑ
assertWarns"unittest.case.TestCase.assertWarns"F
!unittest.case._AssertWarnsContext"!unittest.case._AssertWarnsContext*:
self0
unittest.case.TestCase"unittest.case.TestCase*™
expected_warningì
DUnion[Type[builtins.Warning],builtins.tuple[Type[builtins.Warning]]]F
Type[builtins.Warning]$
builtins.Warning"builtins.Warning"typeÄ
&builtins.tuple[Type[builtins.Warning]]F
Type[builtins.Warning]$
builtins.Warning"builtins.Warning"type"builtins.tuple*
msg
Any 0:overloadX"38"39"310"311"312"3132Ù
assertWarnsRegex'unittest.case.TestCase.assertWarnsRegex›
assertWarnsRegex'unittest.case.TestCase.assertWarnsRegex"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*™
expected_warningì
DUnion[Type[builtins.Warning],builtins.tuple[Type[builtins.Warning]]]F
Type[builtins.Warning]$
builtins.Warning"builtins.Warning"typeÄ
&builtins.tuple[Type[builtins.Warning]]F
Type[builtins.Warning]$
builtins.Warning"builtins.Warning"type"builtins.tuple*©
expected_regexî
,Union[builtins.str,re.Pattern[builtins.str]]
builtins.str"builtins.strD
re.Pattern[builtins.str]
builtins.str"builtins.str"
re.Pattern*Y
callableK
CallableType[builtins.function]&
builtins.function"builtins.function*

args *
kwargs 0:overloadX∫
assertWarnsRegex'unittest.case.TestCase.assertWarnsRegex"F
!unittest.case._AssertWarnsContext"!unittest.case._AssertWarnsContext*:
self0
unittest.case.TestCase"unittest.case.TestCase*™
expected_warningì
DUnion[Type[builtins.Warning],builtins.tuple[Type[builtins.Warning]]]F
Type[builtins.Warning]$
builtins.Warning"builtins.Warning"typeÄ
&builtins.tuple[Type[builtins.Warning]]F
Type[builtins.Warning]$
builtins.Warning"builtins.Warning"type"builtins.tuple*©
expected_regexî
,Union[builtins.str,re.Pattern[builtins.str]]
builtins.str"builtins.strD
re.Pattern[builtins.str]
builtins.str"builtins.str"
re.Pattern*
msg
Any 0:overloadX"38"39"310"311"312"3132Ö
assertAlmostEqual(unittest.case.TestCase.assertAlmostEqualù
assertAlmostEqual(unittest.case.TestCase.assertAlmostEqual"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*Å
firstv
unittest.case._SI
_typeshed.SupportsSub[Any,Any]
Any
Any"_typeshed.SupportsSub"_typeshed.SupportsSub*Ç
secondv
unittest.case._SI
_typeshed.SupportsSub[Any,Any]
Any
Any"_typeshed.SupportsSub"_typeshed.SupportsSub*
places
None*
msg
Any*Y
deltaN
%unittest.case._SupportsAbsAndDunderGE"%unittest.case._SupportsAbsAndDunderGE0:overloadX°
assertAlmostEqual(unittest.case.TestCase.assertAlmostEqual"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*Å
firstv
unittest.case._SI
_typeshed.SupportsSub[Any,Any]
Any
Any"_typeshed.SupportsSub"_typeshed.SupportsSub*Ç
secondv
unittest.case._SI
_typeshed.SupportsSub[Any,Any]
Any
Any"_typeshed.SupportsSub"_typeshed.SupportsSub*
places
None *
msg
Any *Y
deltaN
%unittest.case._SupportsAbsAndDunderGE"%unittest.case._SupportsAbsAndDunderGE0:overloadX
assertAlmostEqual(unittest.case.TestCase.assertAlmostEqual"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*Ü
first˙
a_typeshed.SupportsSub[unittest.case._T,typing.SupportsAbs[typing.SupportsRound[builtins.object]]]I
unittest.case._T"
builtins.object"builtins.object"builtins.object≤
9typing.SupportsAbs[typing.SupportsRound[builtins.object]]a
%typing.SupportsRound[builtins.object]"
builtins.object"builtins.object"typing.SupportsRound"typing.SupportsAbs"_typeshed.SupportsSub*U
secondI
unittest.case._T"
builtins.object"builtins.object"builtins.object*R
placesD
Union[builtins.int,None]
builtins.int"builtins.int
None *
msg
Any *
delta
None 0:overloadXÚ
assertAlmostEqual(unittest.case.TestCase.assertAlmostEqual"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*T
firstI
unittest.case._T"
builtins.object"builtins.object"builtins.object*â
second¸
b_typeshed.SupportsRSub[unittest.case._T,typing.SupportsAbs[typing.SupportsRound[builtins.object]]]I
unittest.case._T"
builtins.object"builtins.object"builtins.object≤
9typing.SupportsAbs[typing.SupportsRound[builtins.object]]a
%typing.SupportsRound[builtins.object]"
builtins.object"builtins.object"typing.SupportsRound"typing.SupportsAbs"_typeshed.SupportsRSub*R
placesD
Union[builtins.int,None]
builtins.int"builtins.int
None *
msg
Any *
delta
None 0:overloadX"38"39"310"311"312"3132£
assertNotAlmostEqual+unittest.case.TestCase.assertNotAlmostEqual£
assertNotAlmostEqual+unittest.case.TestCase.assertNotAlmostEqual"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*Å
firstv
unittest.case._SI
_typeshed.SupportsSub[Any,Any]
Any
Any"_typeshed.SupportsSub"_typeshed.SupportsSub*Ç
secondv
unittest.case._SI
_typeshed.SupportsSub[Any,Any]
Any
Any"_typeshed.SupportsSub"_typeshed.SupportsSub*
places
None*
msg
Any*Y
deltaN
%unittest.case._SupportsAbsAndDunderGE"%unittest.case._SupportsAbsAndDunderGE0:overloadXß
assertNotAlmostEqual+unittest.case.TestCase.assertNotAlmostEqual"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*Å
firstv
unittest.case._SI
_typeshed.SupportsSub[Any,Any]
Any
Any"_typeshed.SupportsSub"_typeshed.SupportsSub*Ç
secondv
unittest.case._SI
_typeshed.SupportsSub[Any,Any]
Any
Any"_typeshed.SupportsSub"_typeshed.SupportsSub*
places
None *
msg
Any *Y
deltaN
%unittest.case._SupportsAbsAndDunderGE"%unittest.case._SupportsAbsAndDunderGE0:overloadXˆ
assertNotAlmostEqual+unittest.case.TestCase.assertNotAlmostEqual"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*Ü
first˙
a_typeshed.SupportsSub[unittest.case._T,typing.SupportsAbs[typing.SupportsRound[builtins.object]]]I
unittest.case._T"
builtins.object"builtins.object"builtins.object≤
9typing.SupportsAbs[typing.SupportsRound[builtins.object]]a
%typing.SupportsRound[builtins.object]"
builtins.object"builtins.object"typing.SupportsRound"typing.SupportsAbs"_typeshed.SupportsSub*U
secondI
unittest.case._T"
builtins.object"builtins.object"builtins.object*R
placesD
Union[builtins.int,None]
builtins.int"builtins.int
None *
msg
Any *
delta
None 0:overloadX¯
assertNotAlmostEqual+unittest.case.TestCase.assertNotAlmostEqual"
None*:
self0
unittest.case.TestCase"unittest.case.TestCase*T
firstI
unittest.case._T"
builtins.object"builtins.object"builtins.object*â
second¸
b_typeshed.SupportsRSub[unittest.case._T,typing.SupportsAbs[typing.SupportsRound[builtins.object]]]I
unittest.case._T"
builtins.object"builtins.object"builtins.object≤
9typing.SupportsAbs[typing.SupportsRound[builtins.object]]a
%typing.SupportsRound[builtins.object]"
builtins.object"builtins.object"typing.SupportsRound"typing.SupportsAbs"_typeshed.SupportsRSub*R
placesD
Union[builtins.int,None]
builtins.int"builtins.int
None *
msg
Any *
delta
None 0:overloadX"38"39"310"311"312"313j38j39j310j311j312j313r±
failureException'unittest.case.TestCase.failureExceptionX
Type[builtins.BaseException]0
builtins.BaseException"builtins.BaseException"type*38*39*310*311*312*313rm
longMessage"unittest.case.TestCase.longMessage
builtins.bool"builtins.bool*38*39*310*311*312*313rã
maxDiffunittest.case.TestCase.maxDiffD
Union[builtins.int,None]
builtins.int"builtins.int
None*38*39*310*311*312*313rs
_testMethodName&unittest.case.TestCase._testMethodName
builtins.str"builtins.str*38*39*310*311*312*313rq
_testMethodDoc%unittest.case.TestCase._testMethodDoc
builtins.str"builtins.str*38*39*310*311*312*313rò
failUnlessEqual&unittest.case.TestCase.failUnlessEqualK
CallableType[builtins.function]&
builtins.function"builtins.function*38*39*310*311rí
assertEquals#unittest.case.TestCase.assertEqualsK
CallableType[builtins.function]&
builtins.function"builtins.function*38*39*310*311rê
failIfEqual"unittest.case.TestCase.failIfEqualK
CallableType[builtins.function]&
builtins.function"builtins.function*38*39*310*311rò
assertNotEquals&unittest.case.TestCase.assertNotEqualsK
CallableType[builtins.function]&
builtins.function"builtins.function*38*39*310*311ré

failUnless!unittest.case.TestCase.failUnlessK
CallableType[builtins.function]&
builtins.function"builtins.function*38*39*310*311rà
assert_unittest.case.TestCase.assert_K
CallableType[builtins.function]&
builtins.function"builtins.function*38*39*310*311rÜ
failIfunittest.case.TestCase.failIfK
CallableType[builtins.function]&
builtins.function"builtins.function*38*39*310*311r≠
failUnlessRaises'unittest.case.TestCase.failUnlessRaises^
CallableType[builtins.function]&
builtins.function"builtins.function"builtins.function*38*39*310*311r∑
failUnlessAlmostEqual,unittest.case.TestCase.failUnlessAlmostEqual^
CallableType[builtins.function]&
builtins.function"builtins.function"builtins.function*38*39*310*311r±
assertAlmostEquals)unittest.case.TestCase.assertAlmostEquals^
CallableType[builtins.function]&
builtins.function"builtins.function"builtins.function*38*39*310*311rØ
failIfAlmostEqual(unittest.case.TestCase.failIfAlmostEqual^
CallableType[builtins.function]&
builtins.function"builtins.function"builtins.function*38*39*310*311r∑
assertNotAlmostEquals,unittest.case.TestCase.assertNotAlmostEquals^
CallableType[builtins.function]&
builtins.function"builtins.function"builtins.function*38*39*310*311r†
assertRegexpMatches*unittest.case.TestCase.assertRegexpMatchesK
CallableType[builtins.function]&
builtins.function"builtins.function*38*39*310*311r¶
assertNotRegexpMatches-unittest.case.TestCase.assertNotRegexpMatchesK
CallableType[builtins.function]&
builtins.function"builtins.function*38*39*310*311r±
assertRaisesRegexp)unittest.case.TestCase.assertRaisesRegexp^
CallableType[builtins.function]&
builtins.function"builtins.function"builtins.function*38*39*310*311ô
FunctionTestCaseunittest.case.FunctionTestCase"unittest.case.TestCase*ä
__init__'unittest.case.FunctionTestCase.__init__"
None*J
self@
unittest.case.FunctionTestCase"unittest.case.FunctionTestCase*Y
testFuncK
CallableType[builtins.function]&
builtins.function"builtins.function*î
setUpÜ
+Union[CallableType[builtins.function],None]K
CallableType[builtins.function]&
builtins.function"builtins.function
None *ó
tearDownÜ
+Union[CallableType[builtins.function],None]K
CallableType[builtins.function]&
builtins.function"builtins.function
None *W
descriptionD
Union[builtins.str,None]
builtins.str"builtins.str
None z38z39z310z311z312z313*£
runTest&unittest.case.FunctionTestCase.runTest"
None*J
self@
unittest.case.FunctionTestCase"unittest.case.FunctionTestCasez38z39z310z311z312z313j38j39j310j311j312j313⁄
_AssertRaisesContext"unittest.case._AssertRaisesContext"builtins.object*ˆ
	__enter__,unittest.case._AssertRaisesContext.__enter__"å
'unittest.case._AssertRaisesContext.Self∫
4unittest.case._AssertRaisesContext[unittest.case._E]^
unittest.case._E0
builtins.BaseException"builtins.BaseException"builtins.BaseException""unittest.case._AssertRaisesContext""unittest.case._AssertRaisesContext*èå
'unittest.case._AssertRaisesContext.Self∫
4unittest.case._AssertRaisesContext[unittest.case._E]^
unittest.case._E0
builtins.BaseException"builtins.BaseException"builtins.BaseException""unittest.case._AssertRaisesContext""unittest.case._AssertRaisesContextz38z39z310z311z312z313*å
__exit__+unittest.case._AssertRaisesContext.__exit__"
builtins.bool"builtins.bool*Ω∫
4unittest.case._AssertRaisesContext[unittest.case._E]^
unittest.case._E0
builtins.BaseException"builtins.BaseException"builtins.BaseException""unittest.case._AssertRaisesContext*ìê
(Union[Type[builtins.BaseException],None]X
Type[builtins.BaseException]0
builtins.BaseException"builtins.BaseException"type
None*db
"Union[builtins.BaseException,None]0
builtins.BaseException"builtins.BaseException
None*[Y
Union[types.TracebackType,None]*
types.TracebackType"types.TracebackType
Nonez38z39z310z311z312z313*Æ
__class_getitem__4unittest.case._AssertRaisesContext.__class_getitem__"(
types.GenericAlias"types.GenericAlias*ã
clsÅ
:Type[unittest.case._AssertRaisesContext[unittest.case._E]]∫
4unittest.case._AssertRaisesContext[unittest.case._E]^
unittest.case._E0
builtins.BaseException"builtins.BaseException"builtins.BaseException""unittest.case._AssertRaisesContext"type*
item
Anypz39z310z311z312z313Pj38j39j310j311j312j313rµ
	exception,unittest.case._AssertRaisesContext.exception^
unittest.case._E0
builtins.BaseException"builtins.BaseException"builtins.BaseException*38*39*310*311*312*313ö
_AssertWarnsContext!unittest.case._AssertWarnsContext"builtins.object*á
	__enter__+unittest.case._AssertWarnsContext.__enter__"ï
&unittest.case._AssertWarnsContext.SelfF
!unittest.case._AssertWarnsContext"!unittest.case._AssertWarnsContext"!unittest.case._AssertWarnsContext*òï
&unittest.case._AssertWarnsContext.SelfF
!unittest.case._AssertWarnsContext"!unittest.case._AssertWarnsContext"!unittest.case._AssertWarnsContextz38z39z310z311z312z313*ˇ
__exit__*unittest.case._AssertWarnsContext.__exit__"
None*HF
!unittest.case._AssertWarnsContext"!unittest.case._AssertWarnsContext*ìê
(Union[Type[builtins.BaseException],None]X
Type[builtins.BaseException]0
builtins.BaseException"builtins.BaseException"type
None*db
"Union[builtins.BaseException,None]0
builtins.BaseException"builtins.BaseException
None*[Y
Union[types.TracebackType,None]*
types.TracebackType"types.TracebackType
Nonez38z39z310z311z312z313j38j39j310j311j312j313rÑ
warning)unittest.case._AssertWarnsContext.warning2
warnings.WarningMessage"warnings.WarningMessage*38*39*310*311*312*313rp
filename*unittest.case._AssertWarnsContext.filename
builtins.str"builtins.str*38*39*310*311*312*313rl
lineno(unittest.case._AssertWarnsContext.lineno
builtins.int"builtins.int*38*39*310*311*312*313rø
warnings*unittest.case._AssertWarnsContext.warningsk
&builtins.list[warnings.WarningMessage]2
warnings.WarningMessage"warnings.WarningMessage"builtins.list*38*39*310*311*312*313¡
addModuleCleanupunittest.case.addModuleCleanup"
None*MK
CallableType[builtins.function]&
builtins.function"builtins.function*

args *
kwargs z38z39z310z311z312z313X
doModuleCleanupsunittest.case.doModuleCleanups"
Nonez38z39z310z311z312z313£
expectedFailureunittest.case.expectedFailure"b
unittest.case._FTK
CallableType[builtins.function]&
builtins.function"builtins.function*q
	test_itemb
unittest.case._FTK
CallableType[builtins.function]&
builtins.function"builtins.functionz38z39z310z311z312z313≠
skipunittest.case.skip"K
CallableType[builtins.function]&
builtins.function"builtins.function*(
reason
builtins.str"builtins.strz38z39z310z311z312z313‰
skipIfunittest.case.skipIf"K
CallableType[builtins.function]&
builtins.function"builtins.function*1
	condition"
builtins.object"builtins.object*(
reason
builtins.str"builtins.strz38z39z310z311z312z313Ï

skipUnlessunittest.case.skipUnless"K
CallableType[builtins.function]&
builtins.function"builtins.function*1
	condition"
builtins.object"builtins.object*(
reason
builtins.str"builtins.strz38z39z310z311z312z313ø
enterModuleContext unittest.case.enterModuleContext"I
unittest.case._T"
builtins.object"builtins.object"builtins.object*¨
cm£
3contextlib.AbstractContextManager[unittest.case._T]I
unittest.case._T"
builtins.object"builtins.object"builtins.object"!contextlib.AbstractContextManagerz311z312z313*•
__annotations__unittest.case.__annotations__W
builtins.dict[builtins.str,Any]
builtins.str"builtins.str
Any"builtins.dict*38*39*310*311*312*313*2
unittestunittest *38*39*310*311*312*313*d
DIFF_OMITTEDunittest.case.DIFF_OMITTED
builtins.str"builtins.str*38*39*310*311*312*313